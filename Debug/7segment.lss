
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006a6  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000073a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00000e90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a3  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b9  00000000  00000000  00002073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000579  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00002aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f3  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f1  00000000  00000000  000035d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{
	uint8_t flag=0,counter=0,counter10=0,Loop_counter=0;
	uint8_t *ptru8_counter=&counter;
	uint8_t *ptru8_counter10=&counter10;
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8 ,0,0,T0_INTERRUPT_NORMAL);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	42 e0       	ldi	r20, 0x02	; 2
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	00 e0       	ldi	r16, 0x00	; 0
  9c:	ee 24       	eor	r14, r14
  9e:	e3 94       	inc	r14
  a0:	0e 94 a2 02 	call	0x544	; 0x544 <timer0Init>
sevenSegInit(SEG_0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 3c 02 	call	0x478	; 0x478 <sevenSegInit>
sevenSegInit(SEG_1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 3c 02 	call	0x478	; 0x478 <sevenSegInit>

uint8_t Prescaler_Value=0;

int main(void)
{
	uint8_t flag=0,counter=0,counter10=0,Loop_counter=0;
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
	if(flag == 1)
	{
	  	counter10++;
	}
timer0Start();
timer0DelayMs(500);
  b4:	0a e0       	ldi	r16, 0x0A	; 10
sevenSegInit(SEG_0);
sevenSegInit(SEG_1);
//gpioPortDirection(GPIOD,HIGH);
    while(1)
    {
	sevenSegEnable(SEG_0);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 4b 02 	call	0x496	; 0x496 <sevenSegEnable>
	sevenSegEnable(SEG_1);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 4b 02 	call	0x496	; 0x496 <sevenSegEnable>
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
{
	flag=0;
/*softwareDelayMs(50);*/

if (counter >= 9 || counter10 >=9)
  c2:	d9 30       	cpi	r29, 0x09	; 9
  c4:	20 f4       	brcc	.+8      	; 0xce <main+0x3c>
  c6:	19 30       	cpi	r17, 0x09	; 9
  c8:	10 f4       	brcc	.+4      	; 0xce <main+0x3c>
{
	flag=1;
	counter=0;
	//break;
}else{
	counter++;
  ca:	df 5f       	subi	r29, 0xFF	; 255
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x40>
}
	if(flag == 1)
	{
	  	counter10++;
  ce:	1f 5f       	subi	r17, 0xFF	; 255
  d0:	d0 e0       	ldi	r29, 0x00	; 0
	}
timer0Start();
  d2:	0e 94 95 02 	call	0x52a	; 0x52a <timer0Start>
timer0DelayMs(500);
  d6:	84 ef       	ldi	r24, 0xF4	; 244
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 cc 02 	call	0x598	; 0x598 <timer0DelayMs>
  de:	c0 2f       	mov	r28, r16
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
{
sevenSegDisable(SEG_0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sevenSegDisable>
sevenSegEnable(SEG_1);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 4b 02 	call	0x496	; 0x496 <sevenSegEnable>
sevenSegWrite(SEG_1,*ptru8_counter);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	6d 2f       	mov	r22, r29
  f0:	0e 94 6d 02 	call	0x4da	; 0x4da <sevenSegWrite>
timer0Start();
  f4:	0e 94 95 02 	call	0x52a	; 0x52a <timer0Start>
timer0DelayMs(10);
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 cc 02 	call	0x598	; 0x598 <timer0DelayMs>
sevenSegDisable(SEG_1);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sevenSegDisable>
sevenSegEnable(SEG_0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 4b 02 	call	0x496	; 0x496 <sevenSegEnable>
sevenSegWrite(SEG_0,*ptru8_counter10);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	61 2f       	mov	r22, r17
 110:	0e 94 6d 02 	call	0x4da	; 0x4da <sevenSegWrite>
 114:	c1 50       	subi	r28, 0x01	; 1
	{
	  	counter10++;
	}
timer0Start();
timer0DelayMs(500);
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
 116:	21 f7       	brne	.-56     	; 0xe0 <main+0x4e>
sevenSegDisable(SEG_1);
sevenSegEnable(SEG_0);
sevenSegWrite(SEG_0,*ptru8_counter10);
/*softwareDelayMs(50);*/
}
timer0Start();
 118:	0e 94 95 02 	call	0x52a	; 0x52a <timer0Start>
timer0DelayMs(500);//TODO:: Please write your application code
 11c:	84 ef       	ldi	r24, 0xF4	; 244
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 cc 02 	call	0x598	; 0x598 <timer0DelayMs>
 124:	c8 cf       	rjmp	.-112    	; 0xb6 <main+0x24>

00000126 <__vector_11>:
//TODO:: Please write your application code
    }
}
void __vector_11(void) __attribute__((signal,__INTR_ATTRS));
void __vector_11(void)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
u32_ovf_counter++;
 138:	80 91 61 00 	lds	r24, 0x0061
 13c:	90 91 62 00 	lds	r25, 0x0062
 140:	a0 91 63 00 	lds	r26, 0x0063
 144:	b0 91 64 00 	lds	r27, 0x0064
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	a1 1d       	adc	r26, r1
 14c:	b1 1d       	adc	r27, r1
 14e:	80 93 61 00 	sts	0x0061, r24
 152:	90 93 62 00 	sts	0x0062, r25
 156:	a0 93 63 00 	sts	0x0063, r26
 15a:	b0 93 64 00 	sts	0x0064, r27
}
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	49 f0       	breq	.+18     	; 0x186 <gpioPortDirection+0x16>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	28 f0       	brcs	.+10     	; 0x182 <gpioPortDirection+0x12>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	39 f0       	breq	.+14     	; 0x18a <gpioPortDirection+0x1a>
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	41 f4       	brne	.+16     	; 0x190 <gpioPortDirection+0x20>
 180:	06 c0       	rjmp	.+12     	; 0x18e <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
 182:	6a bb       	out	0x1a, r22	; 26
	break;
 184:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
 186:	67 bb       	out	0x17, r22	; 23
	break;
 188:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
 18a:	64 bb       	out	0x14, r22	; 20
	break;
 18c:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
 18e:	61 bb       	out	0x11, r22	; 17
 190:	08 95       	ret

00000192 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	49 f0       	breq	.+18     	; 0x1a8 <gpioPortWrite+0x16>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	28 f0       	brcs	.+10     	; 0x1a4 <gpioPortWrite+0x12>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	39 f0       	breq	.+14     	; 0x1ac <gpioPortWrite+0x1a>
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	41 f4       	brne	.+16     	; 0x1b2 <gpioPortWrite+0x20>
 1a2:	06 c0       	rjmp	.+12     	; 0x1b0 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
 1a4:	6b bb       	out	0x1b, r22	; 27
	break;
 1a6:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
 1a8:	68 bb       	out	0x18, r22	; 24
	break;
 1aa:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
 1ac:	65 bb       	out	0x15, r22	; 21
	break;
 1ae:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
 1b0:	62 bb       	out	0x12, r22	; 18
 1b2:	08 95       	ret

000001b4 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	59 f0       	breq	.+22     	; 0x1ce <gpioPortToggle+0x1a>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	28 f0       	brcs	.+10     	; 0x1c6 <gpioPortToggle+0x12>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	59 f0       	breq	.+22     	; 0x1d6 <gpioPortToggle+0x22>
 1c0:	83 30       	cpi	r24, 0x03	; 3
 1c2:	81 f4       	brne	.+32     	; 0x1e4 <gpioPortToggle+0x30>
 1c4:	0c c0       	rjmp	.+24     	; 0x1de <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
 1c6:	8b b3       	in	r24, 0x1b	; 27
 1c8:	80 95       	com	r24
 1ca:	8b bb       	out	0x1b, r24	; 27
	break;
 1cc:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
 1ce:	88 b3       	in	r24, 0x18	; 24
 1d0:	80 95       	com	r24
 1d2:	88 bb       	out	0x18, r24	; 24
	break;
 1d4:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
 1d6:	85 b3       	in	r24, 0x15	; 21
 1d8:	80 95       	com	r24
 1da:	85 bb       	out	0x15, r24	; 21
	break;
 1dc:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
 1de:	82 b3       	in	r24, 0x12	; 18
 1e0:	80 95       	com	r24
 1e2:	82 bb       	out	0x12, r24	; 18
 1e4:	08 95       	ret

000001e6 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	49 f0       	breq	.+18     	; 0x1fc <gpioPortRead+0x16>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <gpioPortRead+0x12>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	39 f0       	breq	.+14     	; 0x200 <gpioPortRead+0x1a>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	49 f4       	brne	.+18     	; 0x208 <gpioPortRead+0x22>
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
 1f8:	8b b3       	in	r24, 0x1b	; 27
	break;
 1fa:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
 1fc:	88 b3       	in	r24, 0x18	; 24
	break;
 1fe:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
 200:	85 b3       	in	r24, 0x15	; 21
	break;
 202:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
 204:	82 b3       	in	r24, 0x12	; 18
	break;
 206:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
 208:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
 20a:	08 95       	ret

0000020c <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
 20c:	44 23       	and	r20, r20
 20e:	19 f0       	breq	.+6      	; 0x216 <gpioPinDirection+0xa>
 210:	4f 3f       	cpi	r20, 0xFF	; 255
 212:	d1 f5       	brne	.+116    	; 0x288 <gpioPinDirection+0x7c>
 214:	21 c0       	rjmp	.+66     	; 0x258 <gpioPinDirection+0x4c>
case LOW:
{
switch (u8_port)	
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	69 f0       	breq	.+26     	; 0x234 <gpioPinDirection+0x28>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	28 f0       	brcs	.+10     	; 0x228 <gpioPinDirection+0x1c>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	79 f0       	breq	.+30     	; 0x240 <gpioPinDirection+0x34>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	c9 f4       	brne	.+50     	; 0x258 <gpioPinDirection+0x4c>
 226:	12 c0       	rjmp	.+36     	; 0x24c <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
 228:	8a b3       	in	r24, 0x1a	; 26
 22a:	96 2f       	mov	r25, r22
 22c:	90 95       	com	r25
 22e:	89 23       	and	r24, r25
 230:	8a bb       	out	0x1a, r24	; 26
 232:	1b c0       	rjmp	.+54     	; 0x26a <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
 234:	87 b3       	in	r24, 0x17	; 23
 236:	96 2f       	mov	r25, r22
 238:	90 95       	com	r25
 23a:	89 23       	and	r24, r25
 23c:	87 bb       	out	0x17, r24	; 23
 23e:	19 c0       	rjmp	.+50     	; 0x272 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
 240:	84 b3       	in	r24, 0x14	; 20
 242:	96 2f       	mov	r25, r22
 244:	90 95       	com	r25
 246:	89 23       	and	r24, r25
 248:	84 bb       	out	0x14, r24	; 20
 24a:	17 c0       	rjmp	.+46     	; 0x27a <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
 24c:	81 b3       	in	r24, 0x11	; 17
 24e:	96 2f       	mov	r25, r22
 250:	90 95       	com	r25
 252:	89 23       	and	r24, r25
 254:	81 bb       	out	0x11, r24	; 17
 256:	15 c0       	rjmp	.+42     	; 0x282 <gpioPinDirection+0x76>
	break;
	
}
}
case HIGH:{
switch (u8_port)	
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	59 f0       	breq	.+22     	; 0x272 <gpioPinDirection+0x66>
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	28 f0       	brcs	.+10     	; 0x26a <gpioPinDirection+0x5e>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	59 f0       	breq	.+22     	; 0x27a <gpioPinDirection+0x6e>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	81 f4       	brne	.+32     	; 0x288 <gpioPinDirection+0x7c>
 268:	0c c0       	rjmp	.+24     	; 0x282 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
 26a:	8a b3       	in	r24, 0x1a	; 26
 26c:	68 2b       	or	r22, r24
 26e:	6a bb       	out	0x1a, r22	; 26
	break;
 270:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
 272:	87 b3       	in	r24, 0x17	; 23
 274:	68 2b       	or	r22, r24
 276:	67 bb       	out	0x17, r22	; 23
	break;
 278:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
 27a:	84 b3       	in	r24, 0x14	; 20
 27c:	68 2b       	or	r22, r24
 27e:	64 bb       	out	0x14, r22	; 20
	break;
 280:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
 282:	81 b3       	in	r24, 0x11	; 17
 284:	68 2b       	or	r22, r24
 286:	61 bb       	out	0x11, r22	; 17
 288:	08 95       	ret

0000028a <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
 28a:	44 23       	and	r20, r20
 28c:	19 f0       	breq	.+6      	; 0x294 <gpioPinWrite+0xa>
 28e:	4f 3f       	cpi	r20, 0xFF	; 255
 290:	b1 f5       	brne	.+108    	; 0x2fe <gpioPinWrite+0x74>
 292:	1d c0       	rjmp	.+58     	; 0x2ce <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	61 f0       	breq	.+24     	; 0x2b0 <gpioPinWrite+0x26>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	28 f0       	brcs	.+10     	; 0x2a6 <gpioPinWrite+0x1c>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	69 f0       	breq	.+26     	; 0x2ba <gpioPinWrite+0x30>
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	69 f5       	brne	.+90     	; 0x2fe <gpioPinWrite+0x74>
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
 2a6:	8b b3       	in	r24, 0x1b	; 27
 2a8:	60 95       	com	r22
 2aa:	68 23       	and	r22, r24
 2ac:	6b bb       	out	0x1b, r22	; 27
	break;
 2ae:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
 2b0:	88 b3       	in	r24, 0x18	; 24
 2b2:	60 95       	com	r22
 2b4:	68 23       	and	r22, r24
 2b6:	68 bb       	out	0x18, r22	; 24
	break;
 2b8:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
 2ba:	85 b3       	in	r24, 0x15	; 21
 2bc:	60 95       	com	r22
 2be:	68 23       	and	r22, r24
 2c0:	65 bb       	out	0x15, r22	; 21
	break;
 2c2:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
 2c4:	82 b3       	in	r24, 0x12	; 18
 2c6:	60 95       	com	r22
 2c8:	68 23       	and	r22, r24
 2ca:	62 bb       	out	0x12, r22	; 18
	break;
 2cc:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	59 f0       	breq	.+22     	; 0x2e8 <gpioPinWrite+0x5e>
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	28 f0       	brcs	.+10     	; 0x2e0 <gpioPinWrite+0x56>
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	59 f0       	breq	.+22     	; 0x2f0 <gpioPinWrite+0x66>
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	81 f4       	brne	.+32     	; 0x2fe <gpioPinWrite+0x74>
 2de:	0c c0       	rjmp	.+24     	; 0x2f8 <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
 2e0:	8b b3       	in	r24, 0x1b	; 27
 2e2:	68 2b       	or	r22, r24
 2e4:	6b bb       	out	0x1b, r22	; 27
	break;
 2e6:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
 2e8:	88 b3       	in	r24, 0x18	; 24
 2ea:	68 2b       	or	r22, r24
 2ec:	68 bb       	out	0x18, r22	; 24
	break;
 2ee:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
 2f0:	85 b3       	in	r24, 0x15	; 21
 2f2:	68 2b       	or	r22, r24
 2f4:	65 bb       	out	0x15, r22	; 21
	break;
 2f6:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
 2f8:	82 b3       	in	r24, 0x12	; 18
 2fa:	68 2b       	or	r22, r24
 2fc:	62 bb       	out	0x12, r22	; 18
 2fe:	08 95       	ret

00000300 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	59 f0       	breq	.+22     	; 0x31a <gpioPinToggle+0x1a>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	28 f0       	brcs	.+10     	; 0x312 <gpioPinToggle+0x12>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	59 f0       	breq	.+22     	; 0x322 <gpioPinToggle+0x22>
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	81 f4       	brne	.+32     	; 0x330 <gpioPinToggle+0x30>
 310:	0c c0       	rjmp	.+24     	; 0x32a <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
 312:	8b b3       	in	r24, 0x1b	; 27
 314:	68 27       	eor	r22, r24
 316:	6b bb       	out	0x1b, r22	; 27
	break;
 318:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
 31a:	88 b3       	in	r24, 0x18	; 24
 31c:	68 27       	eor	r22, r24
 31e:	68 bb       	out	0x18, r22	; 24
	break;
 320:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
 322:	85 b3       	in	r24, 0x15	; 21
 324:	68 27       	eor	r22, r24
 326:	65 bb       	out	0x15, r22	; 21
	break;
 328:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
 32a:	82 b3       	in	r24, 0x12	; 18
 32c:	68 27       	eor	r22, r24
 32e:	62 bb       	out	0x12, r22	; 18
 330:	08 95       	ret

00000332 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	51 f0       	breq	.+20     	; 0x34a <gpioPinRead+0x18>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	28 f0       	brcs	.+10     	; 0x344 <gpioPinRead+0x12>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	49 f0       	breq	.+18     	; 0x350 <gpioPinRead+0x1e>
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	69 f4       	brne	.+26     	; 0x35c <gpioPinRead+0x2a>
 342:	09 c0       	rjmp	.+18     	; 0x356 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
 344:	89 b3       	in	r24, 0x19	; 25
 346:	68 23       	and	r22, r24
	break;
 348:	0a c0       	rjmp	.+20     	; 0x35e <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
 34a:	86 b3       	in	r24, 0x16	; 22
 34c:	68 23       	and	r22, r24
	break;
 34e:	07 c0       	rjmp	.+14     	; 0x35e <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
 350:	83 b3       	in	r24, 0x13	; 19
 352:	68 23       	and	r22, r24
	break;
 354:	04 c0       	rjmp	.+8      	; 0x35e <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
 356:	80 b3       	in	r24, 0x10	; 16
 358:	68 23       	and	r22, r24
	break;
 35a:	01 c0       	rjmp	.+2      	; 0x35e <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
 35c:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	66 23       	and	r22, r22
 362:	09 f4       	brne	.+2      	; 0x366 <gpioPinRead+0x34>
 364:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
 366:	08 95       	ret

00000368 <G_interrupt_Enable>:

#include "Interrupts.h"

void G_interrupt_Enable(void)
{
SET_BIT(SREG,7);
 368:	8f b7       	in	r24, 0x3f	; 63
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	8f bf       	out	0x3f, r24	; 63
//SREG |=(1<<7);
}
 36e:	08 95       	ret

00000370 <G_interrupt_Disable>:

void G_interrupt_Disable(void)
{

CLEAR_BIT(SREG,7);
 370:	8f b7       	in	r24, 0x3f	; 63
 372:	8f 77       	andi	r24, 0x7F	; 127
 374:	8f bf       	out	0x3f, r24	; 63
}
 376:	08 95       	ret

00000378 <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	69 f0       	breq	.+26     	; 0x396 <Led_Init+0x1e>
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	28 f0       	brcs	.+10     	; 0x38a <Led_Init+0x12>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	79 f0       	breq	.+30     	; 0x3a2 <Led_Init+0x2a>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	c1 f4       	brne	.+48     	; 0x3b8 <Led_Init+0x40>
 388:	12 c0       	rjmp	.+36     	; 0x3ae <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	60 e1       	ldi	r22, 0x10	; 16
 38e:	4f ef       	ldi	r20, 0xFF	; 255
 390:	0e 94 06 01 	call	0x20c	; 0x20c <gpioPinDirection>
break;
 394:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	60 e2       	ldi	r22, 0x20	; 32
 39a:	4f ef       	ldi	r20, 0xFF	; 255
 39c:	0e 94 06 01 	call	0x20c	; 0x20c <gpioPinDirection>
break;
 3a0:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	60 e4       	ldi	r22, 0x40	; 64
 3a6:	4f ef       	ldi	r20, 0xFF	; 255
 3a8:	0e 94 06 01 	call	0x20c	; 0x20c <gpioPinDirection>
break;
 3ac:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	60 e8       	ldi	r22, 0x80	; 128
 3b2:	4f ef       	ldi	r20, 0xFF	; 255
 3b4:	0e 94 06 01 	call	0x20c	; 0x20c <gpioPinDirection>
 3b8:	08 95       	ret

000003ba <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	69 f0       	breq	.+26     	; 0x3d8 <Led_On+0x1e>
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	28 f0       	brcs	.+10     	; 0x3cc <Led_On+0x12>
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	79 f0       	breq	.+30     	; 0x3e4 <Led_On+0x2a>
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	c1 f4       	brne	.+48     	; 0x3fa <Led_On+0x40>
 3ca:	12 c0       	rjmp	.+36     	; 0x3f0 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	60 e1       	ldi	r22, 0x10	; 16
 3d0:	4f ef       	ldi	r20, 0xFF	; 255
 3d2:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
break;
 3d6:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	60 e2       	ldi	r22, 0x20	; 32
 3dc:	4f ef       	ldi	r20, 0xFF	; 255
 3de:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
break;
 3e2:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	60 e4       	ldi	r22, 0x40	; 64
 3e8:	4f ef       	ldi	r20, 0xFF	; 255
 3ea:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
break;
 3ee:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	60 e8       	ldi	r22, 0x80	; 128
 3f4:	4f ef       	ldi	r20, 0xFF	; 255
 3f6:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
 3fa:	08 95       	ret

000003fc <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	69 f0       	breq	.+26     	; 0x41a <Led_Off+0x1e>
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	28 f0       	brcs	.+10     	; 0x40e <Led_Off+0x12>
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	79 f0       	breq	.+30     	; 0x426 <Led_Off+0x2a>
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	c1 f4       	brne	.+48     	; 0x43c <Led_Off+0x40>
 40c:	12 c0       	rjmp	.+36     	; 0x432 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	60 e1       	ldi	r22, 0x10	; 16
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
break;
 418:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	60 e2       	ldi	r22, 0x20	; 32
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
break;
 424:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	60 e4       	ldi	r22, 0x40	; 64
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
break;
 430:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	60 e8       	ldi	r22, 0x80	; 128
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
 43c:	08 95       	ret

0000043e <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	61 f0       	breq	.+24     	; 0x45a <Led_Toggle+0x1c>
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	28 f0       	brcs	.+10     	; 0x450 <Led_Toggle+0x12>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	69 f0       	breq	.+26     	; 0x464 <Led_Toggle+0x26>
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	a1 f4       	brne	.+40     	; 0x476 <Led_Toggle+0x38>
 44e:	0f c0       	rjmp	.+30     	; 0x46e <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	60 e1       	ldi	r22, 0x10	; 16
 454:	0e 94 80 01 	call	0x300	; 0x300 <gpioPinToggle>
break;
 458:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	60 e2       	ldi	r22, 0x20	; 32
 45e:	0e 94 80 01 	call	0x300	; 0x300 <gpioPinToggle>
break;
 462:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	60 e4       	ldi	r22, 0x40	; 64
 468:	0e 94 80 01 	call	0x300	; 0x300 <gpioPinToggle>
break;
 46c:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	60 e8       	ldi	r22, 0x80	; 128
 472:	0e 94 80 01 	call	0x300	; 0x300 <gpioPinToggle>
 476:	08 95       	ret

00000478 <sevenSegInit>:
#include "sevenSeg.h"
#include "sevenSegConfig.h"
void sevenSegInit(En_SevenSegId_t a_segment_id)
{
switch(a_segment_id)
 478:	88 23       	and	r24, r24
 47a:	19 f0       	breq	.+6      	; 0x482 <sevenSegInit+0xa>
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	51 f4       	brne	.+20     	; 0x494 <sevenSegInit+0x1c>
 480:	05 c0       	rjmp	.+10     	; 0x48c <sevenSegInit+0x14>
{
case SEG_0:
gpioPortDirection(GPIOB,HIGH);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	6f ef       	ldi	r22, 0xFF	; 255
 486:	0e 94 b8 00 	call	0x170	; 0x170 <gpioPortDirection>
break;
 48a:	08 95       	ret
case SEG_1:
gpioPortDirection(GPIOB,HIGH);
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	6f ef       	ldi	r22, 0xFF	; 255
 490:	0e 94 b8 00 	call	0x170	; 0x170 <gpioPortDirection>
 494:	08 95       	ret

00000496 <sevenSegEnable>:
}
}

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
	switch(en_segment_id)
 496:	88 23       	and	r24, r24
 498:	19 f0       	breq	.+6      	; 0x4a0 <sevenSegEnable+0xa>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	61 f4       	brne	.+24     	; 0x4b6 <sevenSegEnable+0x20>
 49e:	06 c0       	rjmp	.+12     	; 0x4ac <sevenSegEnable+0x16>
	{
case SEG_0:
gpioPinWrite(GPIOD,BIT0,HIGH);
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	4f ef       	ldi	r20, 0xFF	; 255
 4a6:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
break;
 4aa:	08 95       	ret
case SEG_1:
gpioPinWrite(GPIOD,BIT1,HIGH);
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	4f ef       	ldi	r20, 0xFF	; 255
 4b2:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
 4b6:	08 95       	ret

000004b8 <sevenSegDisable>:
break;
}
}
void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
switch(en_segment_id)
 4b8:	88 23       	and	r24, r24
 4ba:	19 f0       	breq	.+6      	; 0x4c2 <sevenSegDisable+0xa>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	61 f4       	brne	.+24     	; 0x4d8 <sevenSegDisable+0x20>
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <sevenSegDisable+0x16>
{
case SEG_0:
gpioPinWrite(GPIOD,BIT0,LOW);
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
break;
 4cc:	08 95       	ret
case SEG_1:
gpioPinWrite(GPIOD,BIT1,LOW);
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	62 e0       	ldi	r22, 0x02	; 2
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	0e 94 45 01 	call	0x28a	; 0x28a <gpioPinWrite>
 4d8:	08 95       	ret

000004da <sevenSegWrite>:
break;
}
}
void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
switch(en_segment_id)
 4da:	88 23       	and	r24, r24
 4dc:	19 f0       	breq	.+6      	; 0x4e4 <sevenSegWrite+0xa>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	41 f4       	brne	.+16     	; 0x4f2 <sevenSegWrite+0x18>
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <sevenSegWrite+0x12>
{
case SEG_0:
gpioPortWrite(GPIOB,u8_number);
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 c9 00 	call	0x192	; 0x192 <gpioPortWrite>
break;
 4ea:	08 95       	ret
case SEG_1:
gpioPortWrite(GPIOB,u8_number);
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 c9 00 	call	0x192	; 0x192 <gpioPortWrite>
 4f2:	08 95       	ret

000004f4 <softwareDelayMs>:
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 4f4:	ab 01       	movw	r20, r22
 4f6:	bc 01       	movw	r22, r24
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 4f8:	41 15       	cp	r20, r1
 4fa:	51 05       	cpc	r21, r1
 4fc:	61 05       	cpc	r22, r1
 4fe:	71 05       	cpc	r23, r1
 500:	61 f4       	brne	.+24     	; 0x51a <softwareDelayMs+0x26>
 502:	08 95       	ret
 504:	01 96       	adiw	r24, 0x01	; 1
{
	for(Local_Nope_counter = 0 ;Local_Nope_counter<1500;Local_Nope_counter++);
 506:	e5 e0       	ldi	r30, 0x05	; 5
 508:	8c 3d       	cpi	r24, 0xDC	; 220
 50a:	9e 07       	cpc	r25, r30
 50c:	d9 f7       	brne	.-10     	; 0x504 <softwareDelayMs+0x10>

u32_delay_in_ms--;	
 50e:	41 50       	subi	r20, 0x01	; 1
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	60 40       	sbci	r22, 0x00	; 0
 514:	70 40       	sbci	r23, 0x00	; 0
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 516:	19 f4       	brne	.+6      	; 0x51e <softwareDelayMs+0x2a>
 518:	08 95       	ret
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	c9 01       	movw	r24, r18
 520:	f1 cf       	rjmp	.-30     	; 0x504 <softwareDelayMs+0x10>

00000522 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;	 
 522:	82 bf       	out	0x32, r24	; 50
}
 524:	08 95       	ret

00000526 <timer0Read>:
 
uint8_t timer0Read(void)
{
	 return TCNT0;	 
 526:	82 b7       	in	r24, 0x32	; 50
}
 528:	08 95       	ret

0000052a <timer0Start>:
						
*/
void timer0Start(void)
{

	 TCCR0 &= (0xF8);		 
 52a:	83 b7       	in	r24, 0x33	; 51
 52c:	88 7f       	andi	r24, 0xF8	; 248
 52e:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
 530:	93 b7       	in	r25, 0x33	; 51
 532:	80 91 60 00 	lds	r24, 0x0060
 536:	89 2b       	or	r24, r25
 538:	83 bf       	out	0x33, r24	; 51
}
 53a:	08 95       	ret

0000053c <timer0Stop>:
						      0     0    0
*/ 
void timer0Stop(void)
 {
	 
TCCR0 &= (0xF8);		 
 53c:	83 b7       	in	r24, 0x33	; 51
 53e:	88 7f       	andi	r24, 0xF8	; 248
 540:	83 bf       	out	0x33, r24	; 51
	 
 }
 542:	08 95       	ret

00000544 <timer0Init>:
#include "ledConfig.h"
#include "timers.h"
#include "registers.h"
#include "Interrupts.h"
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
 544:	ef 92       	push	r14
 546:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
 548:	44 23       	and	r20, r20
 54a:	19 f4       	brne	.+6      	; 0x552 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
 54c:	0e 94 9e 02 	call	0x53c	; 0x53c <timer0Stop>
 550:	20 c0       	rjmp	.+64     	; 0x592 <timer0Init+0x4e>
}
else
{
TCCR0 |= en_mode | en_OC0|en_prescal ;
 552:	93 b7       	in	r25, 0x33	; 51
 554:	89 2b       	or	r24, r25
 556:	68 2b       	or	r22, r24
 558:	64 2b       	or	r22, r20
 55a:	63 bf       	out	0x33, r22	; 51
Prescaler_Value=en_prescal;
 55c:	40 93 60 00 	sts	0x0060, r20
TCNT0 = u8_initialValue;
 560:	22 bf       	out	0x32, r18	; 50
OCR0  =u8_outputCompare;
 562:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	e8 16       	cp	r14, r24
 568:	49 f0       	breq	.+18     	; 0x57c <timer0Init+0x38>
 56a:	e8 16       	cp	r14, r24
 56c:	20 f0       	brcs	.+8      	; 0x576 <timer0Init+0x32>
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	e8 16       	cp	r14, r24
 572:	79 f4       	brne	.+30     	; 0x592 <timer0Init+0x4e>
 574:	09 c0       	rjmp	.+18     	; 0x588 <timer0Init+0x44>
case  T0_POLLING:
TIMSK &= T0_POLLING;
 576:	89 b7       	in	r24, 0x39	; 57
 578:	19 be       	out	0x39, r1	; 57
break;
 57a:	0b c0       	rjmp	.+22     	; 0x592 <timer0Init+0x4e>
case T0_INTERRUPT_NORMAL :
{
G_interrupt_Enable();
 57c:	0e 94 b4 01 	call	0x368	; 0x368 <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
 580:	89 b7       	in	r24, 0x39	; 57
 582:	81 60       	ori	r24, 0x01	; 1
 584:	89 bf       	out	0x39, r24	; 57
break;
 586:	05 c0       	rjmp	.+10     	; 0x592 <timer0Init+0x4e>
}
case T0_INTERRUPT_CMP:
{
G_interrupt_Enable();
 588:	0e 94 b4 01 	call	0x368	; 0x368 <G_interrupt_Enable>
TIMSK |=T0_INTERRUPT_CMP;
 58c:	89 b7       	in	r24, 0x39	; 57
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	89 bf       	out	0x39, r24	; 57
}
}
	 
}

}
 592:	0f 91       	pop	r16
 594:	ef 90       	pop	r14
 596:	08 95       	ret

00000598 <timer0DelayMs>:
 
 
 
 */
 void timer0DelayMs(uint16_t u16_delay_in_ms)
 {
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	ec 01       	movw	r28, r24
	uint32_t u32_loop=0;
	u32_ovf_counter=0;
 59e:	10 92 61 00 	sts	0x0061, r1
 5a2:	10 92 62 00 	sts	0x0062, r1
 5a6:	10 92 63 00 	sts	0x0063, r1
 5aa:	10 92 64 00 	sts	0x0064, r1
		timer0Set(48);
 5ae:	80 e3       	ldi	r24, 0x30	; 48
 5b0:	0e 94 91 02 	call	0x522	; 0x522 <timer0Set>
		while(u32_ovf_counter <= (8)*u16_delay_in_ms);
 5b4:	cc 0f       	add	r28, r28
 5b6:	dd 1f       	adc	r29, r29
 5b8:	cc 0f       	add	r28, r28
 5ba:	dd 1f       	adc	r29, r29
 5bc:	cc 0f       	add	r28, r28
 5be:	dd 1f       	adc	r29, r29
 5c0:	ae 01       	movw	r20, r28
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	80 91 61 00 	lds	r24, 0x0061
 5ca:	90 91 62 00 	lds	r25, 0x0062
 5ce:	a0 91 63 00 	lds	r26, 0x0063
 5d2:	b0 91 64 00 	lds	r27, 0x0064
 5d6:	48 17       	cp	r20, r24
 5d8:	59 07       	cpc	r21, r25
 5da:	6a 07       	cpc	r22, r26
 5dc:	7b 07       	cpc	r23, r27
 5de:	98 f7       	brcc	.-26     	; 0x5c6 <timer0DelayMs+0x2e>
	
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <timer0DelayUs>:
 
 
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
 5e6:	8f 92       	push	r8
 5e8:	9f 92       	push	r9
 5ea:	af 92       	push	r10
 5ec:	bf 92       	push	r11
 5ee:	cf 92       	push	r12
 5f0:	df 92       	push	r13
 5f2:	ef 92       	push	r14
 5f4:	ff 92       	push	r15
 5f6:	4b 01       	movw	r8, r22
 5f8:	5c 01       	movw	r10, r24
	u32_ovf_counter=0;
 5fa:	10 92 61 00 	sts	0x0061, r1
 5fe:	10 92 62 00 	sts	0x0062, r1
 602:	10 92 63 00 	sts	0x0063, r1
 606:	10 92 64 00 	sts	0x0064, r1
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 60a:	61 15       	cp	r22, r1
 60c:	71 05       	cpc	r23, r1
 60e:	81 05       	cpc	r24, r1
 610:	91 05       	cpc	r25, r1
 612:	e9 f0       	breq	.+58     	; 0x64e <timer0DelayUs+0x68>
 614:	cc 24       	eor	r12, r12
 616:	dd 24       	eor	r13, r13
 618:	76 01       	movw	r14, r12
	{
	timer0Set(254);
 61a:	8e ef       	ldi	r24, 0xFE	; 254
 61c:	0e 94 91 02 	call	0x522	; 0x522 <timer0Set>
	while(u32_ovf_counter <= 1);	
 620:	80 91 61 00 	lds	r24, 0x0061
 624:	90 91 62 00 	lds	r25, 0x0062
 628:	a0 91 63 00 	lds	r26, 0x0063
 62c:	b0 91 64 00 	lds	r27, 0x0064
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	91 05       	cpc	r25, r1
 634:	a1 05       	cpc	r26, r1
 636:	b1 05       	cpc	r27, r1
 638:	98 f3       	brcs	.-26     	; 0x620 <timer0DelayUs+0x3a>
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
	u32_ovf_counter=0;
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 63a:	08 94       	sec
 63c:	c1 1c       	adc	r12, r1
 63e:	d1 1c       	adc	r13, r1
 640:	e1 1c       	adc	r14, r1
 642:	f1 1c       	adc	r15, r1
 644:	c8 14       	cp	r12, r8
 646:	d9 04       	cpc	r13, r9
 648:	ea 04       	cpc	r14, r10
 64a:	fb 04       	cpc	r15, r11
 64c:	31 f7       	brne	.-52     	; 0x61a <timer0DelayUs+0x34>
	timer0Set(254);
	while(u32_ovf_counter <= 1);	
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	
}/*1*/
 64e:	ff 90       	pop	r15
 650:	ef 90       	pop	r14
 652:	df 90       	pop	r13
 654:	cf 90       	pop	r12
 656:	bf 90       	pop	r11
 658:	af 90       	pop	r10
 65a:	9f 90       	pop	r9
 65c:	8f 90       	pop	r8
 65e:	08 95       	ret

00000660 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	 u32_ovf_counter=0;
 660:	10 92 61 00 	sts	0x0061, r1
 664:	10 92 62 00 	sts	0x0062, r1
 668:	10 92 63 00 	sts	0x0063, r1
 66c:	10 92 64 00 	sts	0x0064, r1
	 timer0Set(155);
 670:	8b e9       	ldi	r24, 0x9B	; 155
 672:	0e 94 91 02 	call	0x522	; 0x522 <timer0Set>
	 while(u32_ovf_counter <= 1);
 676:	80 91 61 00 	lds	r24, 0x0061
 67a:	90 91 62 00 	lds	r25, 0x0062
 67e:	a0 91 63 00 	lds	r26, 0x0063
 682:	b0 91 64 00 	lds	r27, 0x0064
 686:	82 30       	cpi	r24, 0x02	; 2
 688:	91 05       	cpc	r25, r1
 68a:	a1 05       	cpc	r26, r1
 68c:	b1 05       	cpc	r27, r1
 68e:	98 f3       	brcs	.-26     	; 0x676 <timer0SwPWM+0x16>
	 
	 
} 
 690:	08 95       	ret

00000692 <timer1Init>:
 En_timer1Interrupt_t en_interruptMask)
 {
	 
	 
	 
 }
 692:	08 95       	ret

00000694 <timer1Set>:
 * @param value
 */
void timer1Set(uint16_t u16_value)
{
	
}
 694:	08 95       	ret

00000696 <timer1Read>:
 */
uint16_t timer1Read(void)
{
	
	
}
 696:	08 95       	ret

00000698 <timer1Start>:
void timer1Start(void)
{


	
}
 698:	08 95       	ret

0000069a <timer1Stop>:
void timer1Stop(void)
{
	
	
	
}
 69a:	08 95       	ret

0000069c <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{
	
	
}
 69c:	08 95       	ret

0000069e <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{
	
	
}
 69e:	08 95       	ret

000006a0 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	
	
}
 6a0:	08 95       	ret

000006a2 <_exit>:
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
