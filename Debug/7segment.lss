
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006a2  00000736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000736  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00000e90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001079  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a1  00000000  00000000  00002049  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054f  00000000  00000000  000024ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007df  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e5  00000000  00000000  00003557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

uint8_t Prescaler_Value=0;

int main(void)
{
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8 ,0,0,T0_INTERRUPT_NORMAL);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	42 e0       	ldi	r20, 0x02	; 2
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	00 e0       	ldi	r16, 0x00	; 0
  9c:	ee 24       	eor	r14, r14
  9e:	e3 94       	inc	r14
  a0:	0e 94 a0 02 	call	0x540	; 0x540 <timer0Init>
uint8_t flag=0,counter=0,counter10=0,Loop_counter=0;
sevenSegInit(SEG_0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 3a 02 	call	0x474	; 0x474 <sevenSegInit>
sevenSegInit(SEG_1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 3a 02 	call	0x474	; 0x474 <sevenSegInit>
uint8_t Prescaler_Value=0;

int main(void)
{
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8 ,0,0,T0_INTERRUPT_NORMAL);
uint8_t flag=0,counter=0,counter10=0,Loop_counter=0;
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	c0 e0       	ldi	r28, 0x00	; 0
sevenSegInit(SEG_1);
//gpioPortDirection(GPIOD,HIGH);
    while(1)
    {
	sevenSegEnable(SEG_0);
	sevenSegEnable(SEG_1);
  b4:	0a e0       	ldi	r16, 0x0A	; 10
sevenSegInit(SEG_0);
sevenSegInit(SEG_1);
//gpioPortDirection(GPIOD,HIGH);
    while(1)
    {
	sevenSegEnable(SEG_0);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 49 02 	call	0x492	; 0x492 <sevenSegEnable>
	sevenSegEnable(SEG_1);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 49 02 	call	0x492	; 0x492 <sevenSegEnable>
  c2:	d0 2f       	mov	r29, r16
	//sevenSegWrite(SEG_0,0);
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
{
	flag=0;
	sevenSegDisable(SEG_0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <sevenSegDisable>
	sevenSegEnable(SEG_1);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 49 02 	call	0x492	; 0x492 <sevenSegEnable>
	sevenSegWrite(SEG_1,counter);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	6c 2f       	mov	r22, r28
  d4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <sevenSegWrite>
	timer0Start();
  d8:	0e 94 93 02 	call	0x526	; 0x526 <timer0Start>
	timer0DelayMs(50);
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 ca 02 	call	0x594	; 0x594 <timer0DelayMs>
	sevenSegDisable(SEG_1);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <sevenSegDisable>
	sevenSegEnable(SEG_0);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 49 02 	call	0x492	; 0x492 <sevenSegEnable>
	sevenSegWrite(SEG_0,counter10);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	61 2f       	mov	r22, r17
  f4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <sevenSegWrite>
	/*softwareDelayMs(50);*/
	timer0Start();
  f8:	0e 94 93 02 	call	0x526	; 0x526 <timer0Start>
	timer0DelayMs(50);
  fc:	82 e3       	ldi	r24, 0x32	; 50
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 ca 02 	call	0x594	; 0x594 <timer0DelayMs>

/*softwareDelayMs(50);*/

if (counter >= 10)
 104:	ca 30       	cpi	r28, 0x0A	; 10
 106:	10 f4       	brcc	.+4      	; 0x10c <main+0x7a>
{
	flag=1;
	counter=0;
	//break;
}else{
	counter++;
 108:	cf 5f       	subi	r28, 0xFF	; 255
 10a:	02 c0       	rjmp	.+4      	; 0x110 <main+0x7e>
}
	if(flag == 1)
	{
	  	counter10++;
 10c:	1f 5f       	subi	r17, 0xFF	; 255
/*softwareDelayMs(50);*/

if (counter >= 10)
{
	flag=1;
	counter=0;
 10e:	c0 e0       	ldi	r28, 0x00	; 0
}
	if(flag == 1)
	{
	  	counter10++;
	}
	timer0Start();
 110:	0e 94 93 02 	call	0x526	; 0x526 <timer0Start>
	timer0DelayMs(500);
 114:	84 ef       	ldi	r24, 0xF4	; 244
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 ca 02 	call	0x594	; 0x594 <timer0DelayMs>
 11c:	d1 50       	subi	r29, 0x01	; 1
    while(1)
    {
	sevenSegEnable(SEG_0);
	sevenSegEnable(SEG_1);
	//sevenSegWrite(SEG_0,0);
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
 11e:	91 f6       	brne	.-92     	; 0xc4 <main+0x32>
 120:	ca cf       	rjmp	.-108    	; 0xb6 <main+0x24>

00000122 <__vector_11>:
        //TODO:: Please write your application code
    }
}
void __vector_11(void) __attribute__((signal,__INTR_ATTRS));
void __vector_11(void)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
u32_ovf_counter++;
 134:	80 91 61 00 	lds	r24, 0x0061
 138:	90 91 62 00 	lds	r25, 0x0062
 13c:	a0 91 63 00 	lds	r26, 0x0063
 140:	b0 91 64 00 	lds	r27, 0x0064
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	a1 1d       	adc	r26, r1
 148:	b1 1d       	adc	r27, r1
 14a:	80 93 61 00 	sts	0x0061, r24
 14e:	90 93 62 00 	sts	0x0062, r25
 152:	a0 93 63 00 	sts	0x0063, r26
 156:	b0 93 64 00 	sts	0x0064, r27
}
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	49 f0       	breq	.+18     	; 0x182 <gpioPortDirection+0x16>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	28 f0       	brcs	.+10     	; 0x17e <gpioPortDirection+0x12>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	39 f0       	breq	.+14     	; 0x186 <gpioPortDirection+0x1a>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	41 f4       	brne	.+16     	; 0x18c <gpioPortDirection+0x20>
 17c:	06 c0       	rjmp	.+12     	; 0x18a <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
 17e:	6a bb       	out	0x1a, r22	; 26
	break;
 180:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
 182:	67 bb       	out	0x17, r22	; 23
	break;
 184:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
 186:	64 bb       	out	0x14, r22	; 20
	break;
 188:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
 18a:	61 bb       	out	0x11, r22	; 17
 18c:	08 95       	ret

0000018e <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	49 f0       	breq	.+18     	; 0x1a4 <gpioPortWrite+0x16>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	28 f0       	brcs	.+10     	; 0x1a0 <gpioPortWrite+0x12>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	39 f0       	breq	.+14     	; 0x1a8 <gpioPortWrite+0x1a>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	41 f4       	brne	.+16     	; 0x1ae <gpioPortWrite+0x20>
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
 1a0:	6b bb       	out	0x1b, r22	; 27
	break;
 1a2:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
 1a4:	68 bb       	out	0x18, r22	; 24
	break;
 1a6:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
 1a8:	65 bb       	out	0x15, r22	; 21
	break;
 1aa:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
 1ac:	62 bb       	out	0x12, r22	; 18
 1ae:	08 95       	ret

000001b0 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	59 f0       	breq	.+22     	; 0x1ca <gpioPortToggle+0x1a>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	28 f0       	brcs	.+10     	; 0x1c2 <gpioPortToggle+0x12>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	59 f0       	breq	.+22     	; 0x1d2 <gpioPortToggle+0x22>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	81 f4       	brne	.+32     	; 0x1e0 <gpioPortToggle+0x30>
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	80 95       	com	r24
 1c6:	8b bb       	out	0x1b, r24	; 27
	break;
 1c8:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	80 95       	com	r24
 1ce:	88 bb       	out	0x18, r24	; 24
	break;
 1d0:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
 1d2:	85 b3       	in	r24, 0x15	; 21
 1d4:	80 95       	com	r24
 1d6:	85 bb       	out	0x15, r24	; 21
	break;
 1d8:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
 1da:	82 b3       	in	r24, 0x12	; 18
 1dc:	80 95       	com	r24
 1de:	82 bb       	out	0x12, r24	; 18
 1e0:	08 95       	ret

000001e2 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	49 f0       	breq	.+18     	; 0x1f8 <gpioPortRead+0x16>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	28 f0       	brcs	.+10     	; 0x1f4 <gpioPortRead+0x12>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	39 f0       	breq	.+14     	; 0x1fc <gpioPortRead+0x1a>
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	49 f4       	brne	.+18     	; 0x204 <gpioPortRead+0x22>
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
 1f4:	8b b3       	in	r24, 0x1b	; 27
	break;
 1f6:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
 1f8:	88 b3       	in	r24, 0x18	; 24
	break;
 1fa:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
 1fc:	85 b3       	in	r24, 0x15	; 21
	break;
 1fe:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
 200:	82 b3       	in	r24, 0x12	; 18
	break;
 202:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
 204:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
 206:	08 95       	ret

00000208 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
 208:	44 23       	and	r20, r20
 20a:	19 f0       	breq	.+6      	; 0x212 <gpioPinDirection+0xa>
 20c:	4f 3f       	cpi	r20, 0xFF	; 255
 20e:	d1 f5       	brne	.+116    	; 0x284 <gpioPinDirection+0x7c>
 210:	21 c0       	rjmp	.+66     	; 0x254 <gpioPinDirection+0x4c>
case LOW:
{
switch (u8_port)	
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	69 f0       	breq	.+26     	; 0x230 <gpioPinDirection+0x28>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	28 f0       	brcs	.+10     	; 0x224 <gpioPinDirection+0x1c>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	79 f0       	breq	.+30     	; 0x23c <gpioPinDirection+0x34>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	c9 f4       	brne	.+50     	; 0x254 <gpioPinDirection+0x4c>
 222:	12 c0       	rjmp	.+36     	; 0x248 <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
 224:	8a b3       	in	r24, 0x1a	; 26
 226:	96 2f       	mov	r25, r22
 228:	90 95       	com	r25
 22a:	89 23       	and	r24, r25
 22c:	8a bb       	out	0x1a, r24	; 26
 22e:	1b c0       	rjmp	.+54     	; 0x266 <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
 230:	87 b3       	in	r24, 0x17	; 23
 232:	96 2f       	mov	r25, r22
 234:	90 95       	com	r25
 236:	89 23       	and	r24, r25
 238:	87 bb       	out	0x17, r24	; 23
 23a:	19 c0       	rjmp	.+50     	; 0x26e <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
 23c:	84 b3       	in	r24, 0x14	; 20
 23e:	96 2f       	mov	r25, r22
 240:	90 95       	com	r25
 242:	89 23       	and	r24, r25
 244:	84 bb       	out	0x14, r24	; 20
 246:	17 c0       	rjmp	.+46     	; 0x276 <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
 248:	81 b3       	in	r24, 0x11	; 17
 24a:	96 2f       	mov	r25, r22
 24c:	90 95       	com	r25
 24e:	89 23       	and	r24, r25
 250:	81 bb       	out	0x11, r24	; 17
 252:	15 c0       	rjmp	.+42     	; 0x27e <gpioPinDirection+0x76>
	break;
	
}
}
case HIGH:{
switch (u8_port)	
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	59 f0       	breq	.+22     	; 0x26e <gpioPinDirection+0x66>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	28 f0       	brcs	.+10     	; 0x266 <gpioPinDirection+0x5e>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	59 f0       	breq	.+22     	; 0x276 <gpioPinDirection+0x6e>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	81 f4       	brne	.+32     	; 0x284 <gpioPinDirection+0x7c>
 264:	0c c0       	rjmp	.+24     	; 0x27e <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
 266:	8a b3       	in	r24, 0x1a	; 26
 268:	68 2b       	or	r22, r24
 26a:	6a bb       	out	0x1a, r22	; 26
	break;
 26c:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
 26e:	87 b3       	in	r24, 0x17	; 23
 270:	68 2b       	or	r22, r24
 272:	67 bb       	out	0x17, r22	; 23
	break;
 274:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
 276:	84 b3       	in	r24, 0x14	; 20
 278:	68 2b       	or	r22, r24
 27a:	64 bb       	out	0x14, r22	; 20
	break;
 27c:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
 27e:	81 b3       	in	r24, 0x11	; 17
 280:	68 2b       	or	r22, r24
 282:	61 bb       	out	0x11, r22	; 17
 284:	08 95       	ret

00000286 <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
 286:	44 23       	and	r20, r20
 288:	19 f0       	breq	.+6      	; 0x290 <gpioPinWrite+0xa>
 28a:	4f 3f       	cpi	r20, 0xFF	; 255
 28c:	b1 f5       	brne	.+108    	; 0x2fa <gpioPinWrite+0x74>
 28e:	1d c0       	rjmp	.+58     	; 0x2ca <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	61 f0       	breq	.+24     	; 0x2ac <gpioPinWrite+0x26>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	28 f0       	brcs	.+10     	; 0x2a2 <gpioPinWrite+0x1c>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	69 f0       	breq	.+26     	; 0x2b6 <gpioPinWrite+0x30>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	69 f5       	brne	.+90     	; 0x2fa <gpioPinWrite+0x74>
 2a0:	0f c0       	rjmp	.+30     	; 0x2c0 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
 2a2:	8b b3       	in	r24, 0x1b	; 27
 2a4:	60 95       	com	r22
 2a6:	68 23       	and	r22, r24
 2a8:	6b bb       	out	0x1b, r22	; 27
	break;
 2aa:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
 2ac:	88 b3       	in	r24, 0x18	; 24
 2ae:	60 95       	com	r22
 2b0:	68 23       	and	r22, r24
 2b2:	68 bb       	out	0x18, r22	; 24
	break;
 2b4:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
 2b6:	85 b3       	in	r24, 0x15	; 21
 2b8:	60 95       	com	r22
 2ba:	68 23       	and	r22, r24
 2bc:	65 bb       	out	0x15, r22	; 21
	break;
 2be:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
 2c0:	82 b3       	in	r24, 0x12	; 18
 2c2:	60 95       	com	r22
 2c4:	68 23       	and	r22, r24
 2c6:	62 bb       	out	0x12, r22	; 18
	break;
 2c8:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	59 f0       	breq	.+22     	; 0x2e4 <gpioPinWrite+0x5e>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <gpioPinWrite+0x56>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	59 f0       	breq	.+22     	; 0x2ec <gpioPinWrite+0x66>
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	81 f4       	brne	.+32     	; 0x2fa <gpioPinWrite+0x74>
 2da:	0c c0       	rjmp	.+24     	; 0x2f4 <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
 2dc:	8b b3       	in	r24, 0x1b	; 27
 2de:	68 2b       	or	r22, r24
 2e0:	6b bb       	out	0x1b, r22	; 27
	break;
 2e2:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
 2e4:	88 b3       	in	r24, 0x18	; 24
 2e6:	68 2b       	or	r22, r24
 2e8:	68 bb       	out	0x18, r22	; 24
	break;
 2ea:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
 2ec:	85 b3       	in	r24, 0x15	; 21
 2ee:	68 2b       	or	r22, r24
 2f0:	65 bb       	out	0x15, r22	; 21
	break;
 2f2:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
 2f4:	82 b3       	in	r24, 0x12	; 18
 2f6:	68 2b       	or	r22, r24
 2f8:	62 bb       	out	0x12, r22	; 18
 2fa:	08 95       	ret

000002fc <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	59 f0       	breq	.+22     	; 0x316 <gpioPinToggle+0x1a>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	28 f0       	brcs	.+10     	; 0x30e <gpioPinToggle+0x12>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	59 f0       	breq	.+22     	; 0x31e <gpioPinToggle+0x22>
 308:	83 30       	cpi	r24, 0x03	; 3
 30a:	81 f4       	brne	.+32     	; 0x32c <gpioPinToggle+0x30>
 30c:	0c c0       	rjmp	.+24     	; 0x326 <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
 30e:	8b b3       	in	r24, 0x1b	; 27
 310:	68 27       	eor	r22, r24
 312:	6b bb       	out	0x1b, r22	; 27
	break;
 314:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
 316:	88 b3       	in	r24, 0x18	; 24
 318:	68 27       	eor	r22, r24
 31a:	68 bb       	out	0x18, r22	; 24
	break;
 31c:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
 31e:	85 b3       	in	r24, 0x15	; 21
 320:	68 27       	eor	r22, r24
 322:	65 bb       	out	0x15, r22	; 21
	break;
 324:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
 326:	82 b3       	in	r24, 0x12	; 18
 328:	68 27       	eor	r22, r24
 32a:	62 bb       	out	0x12, r22	; 18
 32c:	08 95       	ret

0000032e <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	51 f0       	breq	.+20     	; 0x346 <gpioPinRead+0x18>
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	28 f0       	brcs	.+10     	; 0x340 <gpioPinRead+0x12>
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	49 f0       	breq	.+18     	; 0x34c <gpioPinRead+0x1e>
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	69 f4       	brne	.+26     	; 0x358 <gpioPinRead+0x2a>
 33e:	09 c0       	rjmp	.+18     	; 0x352 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
 340:	89 b3       	in	r24, 0x19	; 25
 342:	68 23       	and	r22, r24
	break;
 344:	0a c0       	rjmp	.+20     	; 0x35a <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
 346:	86 b3       	in	r24, 0x16	; 22
 348:	68 23       	and	r22, r24
	break;
 34a:	07 c0       	rjmp	.+14     	; 0x35a <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
 34c:	83 b3       	in	r24, 0x13	; 19
 34e:	68 23       	and	r22, r24
	break;
 350:	04 c0       	rjmp	.+8      	; 0x35a <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
 352:	80 b3       	in	r24, 0x10	; 16
 354:	68 23       	and	r22, r24
	break;
 356:	01 c0       	rjmp	.+2      	; 0x35a <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
 358:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	66 23       	and	r22, r22
 35e:	09 f4       	brne	.+2      	; 0x362 <gpioPinRead+0x34>
 360:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
 362:	08 95       	ret

00000364 <G_interrupt_Enable>:

#include "Interrupts.h"

void G_interrupt_Enable(void)
{
SET_BIT(SREG,7);
 364:	8f b7       	in	r24, 0x3f	; 63
 366:	80 68       	ori	r24, 0x80	; 128
 368:	8f bf       	out	0x3f, r24	; 63
//SREG |=(1<<7);
}
 36a:	08 95       	ret

0000036c <G_interrupt_Disable>:

void G_interrupt_Disable(void)
{

CLEAR_BIT(SREG,7);
 36c:	8f b7       	in	r24, 0x3f	; 63
 36e:	8f 77       	andi	r24, 0x7F	; 127
 370:	8f bf       	out	0x3f, r24	; 63
}
 372:	08 95       	ret

00000374 <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	69 f0       	breq	.+26     	; 0x392 <Led_Init+0x1e>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	28 f0       	brcs	.+10     	; 0x386 <Led_Init+0x12>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	79 f0       	breq	.+30     	; 0x39e <Led_Init+0x2a>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	c1 f4       	brne	.+48     	; 0x3b4 <Led_Init+0x40>
 384:	12 c0       	rjmp	.+36     	; 0x3aa <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	60 e1       	ldi	r22, 0x10	; 16
 38a:	4f ef       	ldi	r20, 0xFF	; 255
 38c:	0e 94 04 01 	call	0x208	; 0x208 <gpioPinDirection>
break;
 390:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	60 e2       	ldi	r22, 0x20	; 32
 396:	4f ef       	ldi	r20, 0xFF	; 255
 398:	0e 94 04 01 	call	0x208	; 0x208 <gpioPinDirection>
break;
 39c:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	60 e4       	ldi	r22, 0x40	; 64
 3a2:	4f ef       	ldi	r20, 0xFF	; 255
 3a4:	0e 94 04 01 	call	0x208	; 0x208 <gpioPinDirection>
break;
 3a8:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	60 e8       	ldi	r22, 0x80	; 128
 3ae:	4f ef       	ldi	r20, 0xFF	; 255
 3b0:	0e 94 04 01 	call	0x208	; 0x208 <gpioPinDirection>
 3b4:	08 95       	ret

000003b6 <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	69 f0       	breq	.+26     	; 0x3d4 <Led_On+0x1e>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	28 f0       	brcs	.+10     	; 0x3c8 <Led_On+0x12>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	79 f0       	breq	.+30     	; 0x3e0 <Led_On+0x2a>
 3c2:	83 30       	cpi	r24, 0x03	; 3
 3c4:	c1 f4       	brne	.+48     	; 0x3f6 <Led_On+0x40>
 3c6:	12 c0       	rjmp	.+36     	; 0x3ec <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	60 e1       	ldi	r22, 0x10	; 16
 3cc:	4f ef       	ldi	r20, 0xFF	; 255
 3ce:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
break;
 3d2:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	60 e2       	ldi	r22, 0x20	; 32
 3d8:	4f ef       	ldi	r20, 0xFF	; 255
 3da:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
break;
 3de:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	60 e4       	ldi	r22, 0x40	; 64
 3e4:	4f ef       	ldi	r20, 0xFF	; 255
 3e6:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
break;
 3ea:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	60 e8       	ldi	r22, 0x80	; 128
 3f0:	4f ef       	ldi	r20, 0xFF	; 255
 3f2:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
 3f6:	08 95       	ret

000003f8 <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	69 f0       	breq	.+26     	; 0x416 <Led_Off+0x1e>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	28 f0       	brcs	.+10     	; 0x40a <Led_Off+0x12>
 400:	82 30       	cpi	r24, 0x02	; 2
 402:	79 f0       	breq	.+30     	; 0x422 <Led_Off+0x2a>
 404:	83 30       	cpi	r24, 0x03	; 3
 406:	c1 f4       	brne	.+48     	; 0x438 <Led_Off+0x40>
 408:	12 c0       	rjmp	.+36     	; 0x42e <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	60 e1       	ldi	r22, 0x10	; 16
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
break;
 414:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	60 e2       	ldi	r22, 0x20	; 32
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
break;
 420:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	60 e4       	ldi	r22, 0x40	; 64
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
break;
 42c:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	60 e8       	ldi	r22, 0x80	; 128
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
 438:	08 95       	ret

0000043a <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	61 f0       	breq	.+24     	; 0x456 <Led_Toggle+0x1c>
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	28 f0       	brcs	.+10     	; 0x44c <Led_Toggle+0x12>
 442:	82 30       	cpi	r24, 0x02	; 2
 444:	69 f0       	breq	.+26     	; 0x460 <Led_Toggle+0x26>
 446:	83 30       	cpi	r24, 0x03	; 3
 448:	a1 f4       	brne	.+40     	; 0x472 <Led_Toggle+0x38>
 44a:	0f c0       	rjmp	.+30     	; 0x46a <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	60 e1       	ldi	r22, 0x10	; 16
 450:	0e 94 7e 01 	call	0x2fc	; 0x2fc <gpioPinToggle>
break;
 454:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	60 e2       	ldi	r22, 0x20	; 32
 45a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <gpioPinToggle>
break;
 45e:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	60 e4       	ldi	r22, 0x40	; 64
 464:	0e 94 7e 01 	call	0x2fc	; 0x2fc <gpioPinToggle>
break;
 468:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	60 e8       	ldi	r22, 0x80	; 128
 46e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <gpioPinToggle>
 472:	08 95       	ret

00000474 <sevenSegInit>:
#include "sevenSeg.h"
#include "sevenSegConfig.h"
void sevenSegInit(En_SevenSegId_t a_segment_id)
{
switch(a_segment_id)
 474:	88 23       	and	r24, r24
 476:	19 f0       	breq	.+6      	; 0x47e <sevenSegInit+0xa>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	51 f4       	brne	.+20     	; 0x490 <sevenSegInit+0x1c>
 47c:	05 c0       	rjmp	.+10     	; 0x488 <sevenSegInit+0x14>
{
case SEG_0:
gpioPortDirection(GPIOB,HIGH);
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	6f ef       	ldi	r22, 0xFF	; 255
 482:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPortDirection>
break;
 486:	08 95       	ret
case SEG_1:
gpioPortDirection(GPIOB,HIGH);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	6f ef       	ldi	r22, 0xFF	; 255
 48c:	0e 94 b6 00 	call	0x16c	; 0x16c <gpioPortDirection>
 490:	08 95       	ret

00000492 <sevenSegEnable>:
}
}

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
	switch(en_segment_id)
 492:	88 23       	and	r24, r24
 494:	19 f0       	breq	.+6      	; 0x49c <sevenSegEnable+0xa>
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	61 f4       	brne	.+24     	; 0x4b2 <sevenSegEnable+0x20>
 49a:	06 c0       	rjmp	.+12     	; 0x4a8 <sevenSegEnable+0x16>
	{
case SEG_0:
gpioPinWrite(GPIOD,BIT0,HIGH);
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	4f ef       	ldi	r20, 0xFF	; 255
 4a2:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
break;
 4a6:	08 95       	ret
case SEG_1:
gpioPinWrite(GPIOD,BIT1,HIGH);
 4a8:	83 e0       	ldi	r24, 0x03	; 3
 4aa:	62 e0       	ldi	r22, 0x02	; 2
 4ac:	4f ef       	ldi	r20, 0xFF	; 255
 4ae:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
 4b2:	08 95       	ret

000004b4 <sevenSegDisable>:
break;
}
}
void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
switch(en_segment_id)
 4b4:	88 23       	and	r24, r24
 4b6:	19 f0       	breq	.+6      	; 0x4be <sevenSegDisable+0xa>
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	61 f4       	brne	.+24     	; 0x4d4 <sevenSegDisable+0x20>
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <sevenSegDisable+0x16>
{
case SEG_0:
gpioPinWrite(GPIOD,BIT0,LOW);
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
break;
 4c8:	08 95       	ret
case SEG_1:
gpioPinWrite(GPIOD,BIT1,LOW);
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	62 e0       	ldi	r22, 0x02	; 2
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	0e 94 43 01 	call	0x286	; 0x286 <gpioPinWrite>
 4d4:	08 95       	ret

000004d6 <sevenSegWrite>:
break;
}
}
void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
switch(en_segment_id)
 4d6:	88 23       	and	r24, r24
 4d8:	19 f0       	breq	.+6      	; 0x4e0 <sevenSegWrite+0xa>
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	41 f4       	brne	.+16     	; 0x4ee <sevenSegWrite+0x18>
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <sevenSegWrite+0x12>
{
case SEG_0:
gpioPortWrite(GPIOB,u8_number);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 c7 00 	call	0x18e	; 0x18e <gpioPortWrite>
break;
 4e6:	08 95       	ret
case SEG_1:
gpioPortWrite(GPIOB,u8_number);
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 c7 00 	call	0x18e	; 0x18e <gpioPortWrite>
 4ee:	08 95       	ret

000004f0 <softwareDelayMs>:
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 4f0:	ab 01       	movw	r20, r22
 4f2:	bc 01       	movw	r22, r24
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 4f4:	41 15       	cp	r20, r1
 4f6:	51 05       	cpc	r21, r1
 4f8:	61 05       	cpc	r22, r1
 4fa:	71 05       	cpc	r23, r1
 4fc:	61 f4       	brne	.+24     	; 0x516 <softwareDelayMs+0x26>
 4fe:	08 95       	ret
 500:	01 96       	adiw	r24, 0x01	; 1
{
	for(Local_Nope_counter = 0 ;Local_Nope_counter<1500;Local_Nope_counter++);
 502:	e5 e0       	ldi	r30, 0x05	; 5
 504:	8c 3d       	cpi	r24, 0xDC	; 220
 506:	9e 07       	cpc	r25, r30
 508:	d9 f7       	brne	.-10     	; 0x500 <softwareDelayMs+0x10>

u32_delay_in_ms--;	
 50a:	41 50       	subi	r20, 0x01	; 1
 50c:	50 40       	sbci	r21, 0x00	; 0
 50e:	60 40       	sbci	r22, 0x00	; 0
 510:	70 40       	sbci	r23, 0x00	; 0
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 512:	19 f4       	brne	.+6      	; 0x51a <softwareDelayMs+0x2a>
 514:	08 95       	ret
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	c9 01       	movw	r24, r18
 51c:	f1 cf       	rjmp	.-30     	; 0x500 <softwareDelayMs+0x10>

0000051e <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;	 
 51e:	82 bf       	out	0x32, r24	; 50
}
 520:	08 95       	ret

00000522 <timer0Read>:
 
uint8_t timer0Read(void)
{
	 return TCNT0;	 
 522:	82 b7       	in	r24, 0x32	; 50
}
 524:	08 95       	ret

00000526 <timer0Start>:
						
*/
void timer0Start(void)
{

	 TCCR0 &= (0xF8);		 
 526:	83 b7       	in	r24, 0x33	; 51
 528:	88 7f       	andi	r24, 0xF8	; 248
 52a:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
 52c:	93 b7       	in	r25, 0x33	; 51
 52e:	80 91 60 00 	lds	r24, 0x0060
 532:	89 2b       	or	r24, r25
 534:	83 bf       	out	0x33, r24	; 51
}
 536:	08 95       	ret

00000538 <timer0Stop>:
						      0     0    0
*/ 
void timer0Stop(void)
 {
	 
TCCR0 &= (0xF8);		 
 538:	83 b7       	in	r24, 0x33	; 51
 53a:	88 7f       	andi	r24, 0xF8	; 248
 53c:	83 bf       	out	0x33, r24	; 51
	 
 }
 53e:	08 95       	ret

00000540 <timer0Init>:
#include "ledConfig.h"
#include "timers.h"
#include "registers.h"
#include "Interrupts.h"
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
 540:	ef 92       	push	r14
 542:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
 544:	44 23       	and	r20, r20
 546:	19 f4       	brne	.+6      	; 0x54e <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
 548:	0e 94 9c 02 	call	0x538	; 0x538 <timer0Stop>
 54c:	20 c0       	rjmp	.+64     	; 0x58e <timer0Init+0x4e>
}
else
{
TCCR0 |= en_mode | en_OC0|en_prescal ;
 54e:	93 b7       	in	r25, 0x33	; 51
 550:	89 2b       	or	r24, r25
 552:	68 2b       	or	r22, r24
 554:	64 2b       	or	r22, r20
 556:	63 bf       	out	0x33, r22	; 51
Prescaler_Value=en_prescal;
 558:	40 93 60 00 	sts	0x0060, r20
TCNT0 = u8_initialValue;
 55c:	22 bf       	out	0x32, r18	; 50
OCR0  =u8_outputCompare;
 55e:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	e8 16       	cp	r14, r24
 564:	49 f0       	breq	.+18     	; 0x578 <timer0Init+0x38>
 566:	e8 16       	cp	r14, r24
 568:	20 f0       	brcs	.+8      	; 0x572 <timer0Init+0x32>
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	e8 16       	cp	r14, r24
 56e:	79 f4       	brne	.+30     	; 0x58e <timer0Init+0x4e>
 570:	09 c0       	rjmp	.+18     	; 0x584 <timer0Init+0x44>
case  T0_POLLING:
TIMSK &= T0_POLLING;
 572:	89 b7       	in	r24, 0x39	; 57
 574:	19 be       	out	0x39, r1	; 57
break;
 576:	0b c0       	rjmp	.+22     	; 0x58e <timer0Init+0x4e>
case T0_INTERRUPT_NORMAL :
{
G_interrupt_Enable();
 578:	0e 94 b2 01 	call	0x364	; 0x364 <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
 57c:	89 b7       	in	r24, 0x39	; 57
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	89 bf       	out	0x39, r24	; 57
break;
 582:	05 c0       	rjmp	.+10     	; 0x58e <timer0Init+0x4e>
}
case T0_INTERRUPT_CMP:
{
G_interrupt_Enable();
 584:	0e 94 b2 01 	call	0x364	; 0x364 <G_interrupt_Enable>
TIMSK |=T0_INTERRUPT_CMP;
 588:	89 b7       	in	r24, 0x39	; 57
 58a:	82 60       	ori	r24, 0x02	; 2
 58c:	89 bf       	out	0x39, r24	; 57
}
}
	 
}

}
 58e:	0f 91       	pop	r16
 590:	ef 90       	pop	r14
 592:	08 95       	ret

00000594 <timer0DelayMs>:
 
 
 
 */
 void timer0DelayMs(uint16_t u16_delay_in_ms)
 {
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
	uint32_t u32_loop=0;
	u32_ovf_counter=0;
 59a:	10 92 61 00 	sts	0x0061, r1
 59e:	10 92 62 00 	sts	0x0062, r1
 5a2:	10 92 63 00 	sts	0x0063, r1
 5a6:	10 92 64 00 	sts	0x0064, r1
		timer0Set(48);
 5aa:	80 e3       	ldi	r24, 0x30	; 48
 5ac:	0e 94 8f 02 	call	0x51e	; 0x51e <timer0Set>
		while(u32_ovf_counter <= (8)*u16_delay_in_ms);
 5b0:	cc 0f       	add	r28, r28
 5b2:	dd 1f       	adc	r29, r29
 5b4:	cc 0f       	add	r28, r28
 5b6:	dd 1f       	adc	r29, r29
 5b8:	cc 0f       	add	r28, r28
 5ba:	dd 1f       	adc	r29, r29
 5bc:	ae 01       	movw	r20, r28
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	80 91 61 00 	lds	r24, 0x0061
 5c6:	90 91 62 00 	lds	r25, 0x0062
 5ca:	a0 91 63 00 	lds	r26, 0x0063
 5ce:	b0 91 64 00 	lds	r27, 0x0064
 5d2:	48 17       	cp	r20, r24
 5d4:	59 07       	cpc	r21, r25
 5d6:	6a 07       	cpc	r22, r26
 5d8:	7b 07       	cpc	r23, r27
 5da:	98 f7       	brcc	.-26     	; 0x5c2 <timer0DelayMs+0x2e>
	
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <timer0DelayUs>:
 
 
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
 5e2:	8f 92       	push	r8
 5e4:	9f 92       	push	r9
 5e6:	af 92       	push	r10
 5e8:	bf 92       	push	r11
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	4b 01       	movw	r8, r22
 5f4:	5c 01       	movw	r10, r24
	u32_ovf_counter=0;
 5f6:	10 92 61 00 	sts	0x0061, r1
 5fa:	10 92 62 00 	sts	0x0062, r1
 5fe:	10 92 63 00 	sts	0x0063, r1
 602:	10 92 64 00 	sts	0x0064, r1
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 606:	61 15       	cp	r22, r1
 608:	71 05       	cpc	r23, r1
 60a:	81 05       	cpc	r24, r1
 60c:	91 05       	cpc	r25, r1
 60e:	e9 f0       	breq	.+58     	; 0x64a <timer0DelayUs+0x68>
 610:	cc 24       	eor	r12, r12
 612:	dd 24       	eor	r13, r13
 614:	76 01       	movw	r14, r12
	{
	timer0Set(254);
 616:	8e ef       	ldi	r24, 0xFE	; 254
 618:	0e 94 8f 02 	call	0x51e	; 0x51e <timer0Set>
	while(u32_ovf_counter <= 1);	
 61c:	80 91 61 00 	lds	r24, 0x0061
 620:	90 91 62 00 	lds	r25, 0x0062
 624:	a0 91 63 00 	lds	r26, 0x0063
 628:	b0 91 64 00 	lds	r27, 0x0064
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	91 05       	cpc	r25, r1
 630:	a1 05       	cpc	r26, r1
 632:	b1 05       	cpc	r27, r1
 634:	98 f3       	brcs	.-26     	; 0x61c <timer0DelayUs+0x3a>
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
	u32_ovf_counter=0;
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 636:	08 94       	sec
 638:	c1 1c       	adc	r12, r1
 63a:	d1 1c       	adc	r13, r1
 63c:	e1 1c       	adc	r14, r1
 63e:	f1 1c       	adc	r15, r1
 640:	c8 14       	cp	r12, r8
 642:	d9 04       	cpc	r13, r9
 644:	ea 04       	cpc	r14, r10
 646:	fb 04       	cpc	r15, r11
 648:	31 f7       	brne	.-52     	; 0x616 <timer0DelayUs+0x34>
	timer0Set(254);
	while(u32_ovf_counter <= 1);	
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	
}/*1*/
 64a:	ff 90       	pop	r15
 64c:	ef 90       	pop	r14
 64e:	df 90       	pop	r13
 650:	cf 90       	pop	r12
 652:	bf 90       	pop	r11
 654:	af 90       	pop	r10
 656:	9f 90       	pop	r9
 658:	8f 90       	pop	r8
 65a:	08 95       	ret

0000065c <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	 u32_ovf_counter=0;
 65c:	10 92 61 00 	sts	0x0061, r1
 660:	10 92 62 00 	sts	0x0062, r1
 664:	10 92 63 00 	sts	0x0063, r1
 668:	10 92 64 00 	sts	0x0064, r1
	 timer0Set(155);
 66c:	8b e9       	ldi	r24, 0x9B	; 155
 66e:	0e 94 8f 02 	call	0x51e	; 0x51e <timer0Set>
	 while(u32_ovf_counter <= 1);
 672:	80 91 61 00 	lds	r24, 0x0061
 676:	90 91 62 00 	lds	r25, 0x0062
 67a:	a0 91 63 00 	lds	r26, 0x0063
 67e:	b0 91 64 00 	lds	r27, 0x0064
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	91 05       	cpc	r25, r1
 686:	a1 05       	cpc	r26, r1
 688:	b1 05       	cpc	r27, r1
 68a:	98 f3       	brcs	.-26     	; 0x672 <timer0SwPWM+0x16>
	 
	 
} 
 68c:	08 95       	ret

0000068e <timer1Init>:
 En_timer1Interrupt_t en_interruptMask)
 {
	 
	 
	 
 }
 68e:	08 95       	ret

00000690 <timer1Set>:
 * @param value
 */
void timer1Set(uint16_t u16_value)
{
	
}
 690:	08 95       	ret

00000692 <timer1Read>:
 */
uint16_t timer1Read(void)
{
	
	
}
 692:	08 95       	ret

00000694 <timer1Start>:
void timer1Start(void)
{


	
}
 694:	08 95       	ret

00000696 <timer1Stop>:
void timer1Stop(void)
{
	
	
	
}
 696:	08 95       	ret

00000698 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{
	
	
}
 698:	08 95       	ret

0000069a <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{
	
	
}
 69a:	08 95       	ret

0000069c <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	
	
}
 69c:	08 95       	ret

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
