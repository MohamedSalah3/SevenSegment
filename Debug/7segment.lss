
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003a2  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e1  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000267  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a7  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a1  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f9  00000000  00000000  00001e11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "sevenSegConfig.h"

int main(void)
{	
	uint8_t flag=0,counter=0,counter10=0,Loop_counter=0;
sevenSegInit(SEG_0);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <sevenSegInit>
sevenSegInit(SEG_1);
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <sevenSegInit>
#include "sevenSeg.h"
#include "sevenSegConfig.h"

int main(void)
{	
	uint8_t flag=0,counter=0,counter10=0,Loop_counter=0;
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c0 e0       	ldi	r28, 0x00	; 0
//gpioPortDirection(GPIOD,HIGH);
    while(1)
    {
	
	sevenSegEnable(SEG_0);
	sevenSegEnable(SEG_1);
  a2:	0a e0       	ldi	r16, 0x0A	; 10
sevenSegInit(SEG_1);
//gpioPortDirection(GPIOD,HIGH);
    while(1)
    {
	
	sevenSegEnable(SEG_0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 89 01 	call	0x312	; 0x312 <sevenSegEnable>
	sevenSegEnable(SEG_1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 89 01 	call	0x312	; 0x312 <sevenSegEnable>
  b0:	d0 2f       	mov	r29, r16
	//sevenSegWrite(SEG_0,0);
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
{	flag=0;
	sevenSegDisable(SEG_0);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 9a 01 	call	0x334	; 0x334 <sevenSegDisable>
	sevenSegWrite(SEG_1,counter);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	6c 2f       	mov	r22, r28
  bc:	0e 94 ab 01 	call	0x356	; 0x356 <sevenSegWrite>
			softwareDelayMs(50);
  c0:	62 e3       	ldi	r22, 0x32	; 50
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 b8 01 	call	0x370	; 0x370 <softwareDelayMs>

counter++;
  cc:	cf 5f       	subi	r28, 0xFF	; 255
if (counter >= 10)
  ce:	ca 30       	cpi	r28, 0x0A	; 10
  d0:	18 f4       	brcc	.+6      	; 0xd8 <main+0x46>
  d2:	d1 50       	subi	r29, 0x01	; 1
    {
	
	sevenSegEnable(SEG_0);
	sevenSegEnable(SEG_1);
	//sevenSegWrite(SEG_0,0);
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
  d4:	71 f7       	brne	.-36     	; 0xb2 <main+0x20>
  d6:	e6 cf       	rjmp	.-52     	; 0xa4 <main+0x12>
	//break;
}
	if(flag == 1)
	{
		
		counter10++;
  d8:	1f 5f       	subi	r17, 0xFF	; 255
			flag=0;
			sevenSegDisable(SEG_1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 9a 01 	call	0x334	; 0x334 <sevenSegDisable>
			sevenSegEnable(SEG_0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 89 01 	call	0x312	; 0x312 <sevenSegEnable>
			sevenSegWrite(SEG_0,counter10);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	61 2f       	mov	r22, r17
  ea:	0e 94 ab 01 	call	0x356	; 0x356 <sevenSegWrite>
			softwareDelayMs(50);
  ee:	62 e3       	ldi	r22, 0x32	; 50
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 b8 01 	call	0x370	; 0x370 <softwareDelayMs>

counter++;
if (counter >= 10)
{
	flag=1;
	counter=0;
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	ea cf       	rjmp	.-44     	; 0xd2 <main+0x40>

000000fe <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	49 f0       	breq	.+18     	; 0x114 <gpioPortDirection+0x16>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	28 f0       	brcs	.+10     	; 0x110 <gpioPortDirection+0x12>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	39 f0       	breq	.+14     	; 0x118 <gpioPortDirection+0x1a>
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	41 f4       	brne	.+16     	; 0x11e <gpioPortDirection+0x20>
 10e:	06 c0       	rjmp	.+12     	; 0x11c <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
 110:	6a bb       	out	0x1a, r22	; 26
	break;
 112:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
 114:	67 bb       	out	0x17, r22	; 23
	break;
 116:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
 118:	64 bb       	out	0x14, r22	; 20
	break;
 11a:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
 11c:	61 bb       	out	0x11, r22	; 17
 11e:	08 95       	ret

00000120 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	49 f0       	breq	.+18     	; 0x136 <gpioPortWrite+0x16>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	28 f0       	brcs	.+10     	; 0x132 <gpioPortWrite+0x12>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	39 f0       	breq	.+14     	; 0x13a <gpioPortWrite+0x1a>
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	41 f4       	brne	.+16     	; 0x140 <gpioPortWrite+0x20>
 130:	06 c0       	rjmp	.+12     	; 0x13e <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
 132:	6b bb       	out	0x1b, r22	; 27
	break;
 134:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
 136:	68 bb       	out	0x18, r22	; 24
	break;
 138:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
 13a:	65 bb       	out	0x15, r22	; 21
	break;
 13c:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
 13e:	62 bb       	out	0x12, r22	; 18
 140:	08 95       	ret

00000142 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	59 f0       	breq	.+22     	; 0x15c <gpioPortToggle+0x1a>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	28 f0       	brcs	.+10     	; 0x154 <gpioPortToggle+0x12>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	59 f0       	breq	.+22     	; 0x164 <gpioPortToggle+0x22>
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	81 f4       	brne	.+32     	; 0x172 <gpioPortToggle+0x30>
 152:	0c c0       	rjmp	.+24     	; 0x16c <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
 154:	8b b3       	in	r24, 0x1b	; 27
 156:	80 95       	com	r24
 158:	8b bb       	out	0x1b, r24	; 27
	break;
 15a:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	80 95       	com	r24
 160:	88 bb       	out	0x18, r24	; 24
	break;
 162:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
 164:	85 b3       	in	r24, 0x15	; 21
 166:	80 95       	com	r24
 168:	85 bb       	out	0x15, r24	; 21
	break;
 16a:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
 16c:	82 b3       	in	r24, 0x12	; 18
 16e:	80 95       	com	r24
 170:	82 bb       	out	0x12, r24	; 18
 172:	08 95       	ret

00000174 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data;
	
switch (u8_port)	
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	49 f0       	breq	.+18     	; 0x18a <gpioPortRead+0x16>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	28 f0       	brcs	.+10     	; 0x186 <gpioPortRead+0x12>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	39 f0       	breq	.+14     	; 0x18e <gpioPortRead+0x1a>
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	41 f4       	brne	.+16     	; 0x194 <gpioPortRead+0x20>
 184:	06 c0       	rjmp	.+12     	; 0x192 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
 186:	9b b3       	in	r25, 0x1b	; 27
	break;
 188:	05 c0       	rjmp	.+10     	; 0x194 <gpioPortRead+0x20>
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
 18a:	98 b3       	in	r25, 0x18	; 24
	break;
 18c:	03 c0       	rjmp	.+6      	; 0x194 <gpioPortRead+0x20>
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
 18e:	95 b3       	in	r25, 0x15	; 21
	break;
 190:	01 c0       	rjmp	.+2      	; 0x194 <gpioPortRead+0x20>
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
 192:	92 b3       	in	r25, 0x12	; 18
	break;
	
}

return 	U8_ret_Port_data;
}
 194:	89 2f       	mov	r24, r25
 196:	08 95       	ret

00000198 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
 198:	44 23       	and	r20, r20
 19a:	19 f0       	breq	.+6      	; 0x1a2 <gpioPinDirection+0xa>
 19c:	4f 3f       	cpi	r20, 0xFF	; 255
 19e:	d1 f5       	brne	.+116    	; 0x214 <gpioPinDirection+0x7c>
 1a0:	21 c0       	rjmp	.+66     	; 0x1e4 <gpioPinDirection+0x4c>
case LOW:
{
switch (u8_port)	
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	69 f0       	breq	.+26     	; 0x1c0 <gpioPinDirection+0x28>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	28 f0       	brcs	.+10     	; 0x1b4 <gpioPinDirection+0x1c>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	79 f0       	breq	.+30     	; 0x1cc <gpioPinDirection+0x34>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	c9 f4       	brne	.+50     	; 0x1e4 <gpioPinDirection+0x4c>
 1b2:	12 c0       	rjmp	.+36     	; 0x1d8 <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
 1b4:	8a b3       	in	r24, 0x1a	; 26
 1b6:	96 2f       	mov	r25, r22
 1b8:	90 95       	com	r25
 1ba:	89 23       	and	r24, r25
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	1b c0       	rjmp	.+54     	; 0x1f6 <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
 1c0:	87 b3       	in	r24, 0x17	; 23
 1c2:	96 2f       	mov	r25, r22
 1c4:	90 95       	com	r25
 1c6:	89 23       	and	r24, r25
 1c8:	87 bb       	out	0x17, r24	; 23
 1ca:	19 c0       	rjmp	.+50     	; 0x1fe <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
 1cc:	84 b3       	in	r24, 0x14	; 20
 1ce:	96 2f       	mov	r25, r22
 1d0:	90 95       	com	r25
 1d2:	89 23       	and	r24, r25
 1d4:	84 bb       	out	0x14, r24	; 20
 1d6:	17 c0       	rjmp	.+46     	; 0x206 <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
 1d8:	81 b3       	in	r24, 0x11	; 17
 1da:	96 2f       	mov	r25, r22
 1dc:	90 95       	com	r25
 1de:	89 23       	and	r24, r25
 1e0:	81 bb       	out	0x11, r24	; 17
 1e2:	15 c0       	rjmp	.+42     	; 0x20e <gpioPinDirection+0x76>
	break;
	
}
}
case HIGH:{
switch (u8_port)	
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	59 f0       	breq	.+22     	; 0x1fe <gpioPinDirection+0x66>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <gpioPinDirection+0x5e>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	59 f0       	breq	.+22     	; 0x206 <gpioPinDirection+0x6e>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	81 f4       	brne	.+32     	; 0x214 <gpioPinDirection+0x7c>
 1f4:	0c c0       	rjmp	.+24     	; 0x20e <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
 1f6:	8a b3       	in	r24, 0x1a	; 26
 1f8:	68 2b       	or	r22, r24
 1fa:	6a bb       	out	0x1a, r22	; 26
	break;
 1fc:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
 1fe:	87 b3       	in	r24, 0x17	; 23
 200:	68 2b       	or	r22, r24
 202:	67 bb       	out	0x17, r22	; 23
	break;
 204:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
 206:	84 b3       	in	r24, 0x14	; 20
 208:	68 2b       	or	r22, r24
 20a:	64 bb       	out	0x14, r22	; 20
	break;
 20c:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
 20e:	81 b3       	in	r24, 0x11	; 17
 210:	68 2b       	or	r22, r24
 212:	61 bb       	out	0x11, r22	; 17
 214:	08 95       	ret

00000216 <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
 216:	44 23       	and	r20, r20
 218:	19 f0       	breq	.+6      	; 0x220 <gpioPinWrite+0xa>
 21a:	4f 3f       	cpi	r20, 0xFF	; 255
 21c:	b1 f5       	brne	.+108    	; 0x28a <gpioPinWrite+0x74>
 21e:	1d c0       	rjmp	.+58     	; 0x25a <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	61 f0       	breq	.+24     	; 0x23c <gpioPinWrite+0x26>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	28 f0       	brcs	.+10     	; 0x232 <gpioPinWrite+0x1c>
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	69 f0       	breq	.+26     	; 0x246 <gpioPinWrite+0x30>
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	69 f5       	brne	.+90     	; 0x28a <gpioPinWrite+0x74>
 230:	0f c0       	rjmp	.+30     	; 0x250 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
 232:	8b b3       	in	r24, 0x1b	; 27
 234:	60 95       	com	r22
 236:	68 23       	and	r22, r24
 238:	6b bb       	out	0x1b, r22	; 27
	break;
 23a:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
 23c:	88 b3       	in	r24, 0x18	; 24
 23e:	60 95       	com	r22
 240:	68 23       	and	r22, r24
 242:	68 bb       	out	0x18, r22	; 24
	break;
 244:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
 246:	85 b3       	in	r24, 0x15	; 21
 248:	60 95       	com	r22
 24a:	68 23       	and	r22, r24
 24c:	65 bb       	out	0x15, r22	; 21
	break;
 24e:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
 250:	82 b3       	in	r24, 0x12	; 18
 252:	60 95       	com	r22
 254:	68 23       	and	r22, r24
 256:	62 bb       	out	0x12, r22	; 18
	break;
 258:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	59 f0       	breq	.+22     	; 0x274 <gpioPinWrite+0x5e>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	28 f0       	brcs	.+10     	; 0x26c <gpioPinWrite+0x56>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	59 f0       	breq	.+22     	; 0x27c <gpioPinWrite+0x66>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	81 f4       	brne	.+32     	; 0x28a <gpioPinWrite+0x74>
 26a:	0c c0       	rjmp	.+24     	; 0x284 <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	68 2b       	or	r22, r24
 270:	6b bb       	out	0x1b, r22	; 27
	break;
 272:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
 274:	88 b3       	in	r24, 0x18	; 24
 276:	68 2b       	or	r22, r24
 278:	68 bb       	out	0x18, r22	; 24
	break;
 27a:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
 27c:	85 b3       	in	r24, 0x15	; 21
 27e:	68 2b       	or	r22, r24
 280:	65 bb       	out	0x15, r22	; 21
	break;
 282:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
 284:	82 b3       	in	r24, 0x12	; 18
 286:	68 2b       	or	r22, r24
 288:	62 bb       	out	0x12, r22	; 18
 28a:	08 95       	ret

0000028c <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	59 f0       	breq	.+22     	; 0x2a6 <gpioPinToggle+0x1a>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	28 f0       	brcs	.+10     	; 0x29e <gpioPinToggle+0x12>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	59 f0       	breq	.+22     	; 0x2ae <gpioPinToggle+0x22>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	81 f4       	brne	.+32     	; 0x2bc <gpioPinToggle+0x30>
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
 29e:	8b b3       	in	r24, 0x1b	; 27
 2a0:	68 27       	eor	r22, r24
 2a2:	6b bb       	out	0x1b, r22	; 27
	break;
 2a4:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
 2a6:	88 b3       	in	r24, 0x18	; 24
 2a8:	68 27       	eor	r22, r24
 2aa:	68 bb       	out	0x18, r22	; 24
	break;
 2ac:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
 2ae:	85 b3       	in	r24, 0x15	; 21
 2b0:	68 27       	eor	r22, r24
 2b2:	65 bb       	out	0x15, r22	; 21
	break;
 2b4:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	68 27       	eor	r22, r24
 2ba:	62 bb       	out	0x12, r22	; 18
 2bc:	08 95       	ret

000002be <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	51 f0       	breq	.+20     	; 0x2d6 <gpioPinRead+0x18>
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	28 f0       	brcs	.+10     	; 0x2d0 <gpioPinRead+0x12>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	49 f0       	breq	.+18     	; 0x2dc <gpioPinRead+0x1e>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	69 f4       	brne	.+26     	; 0x2e8 <gpioPinRead+0x2a>
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
 2d0:	89 b3       	in	r24, 0x19	; 25
 2d2:	68 23       	and	r22, r24
	break;
 2d4:	0a c0       	rjmp	.+20     	; 0x2ea <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
 2d6:	86 b3       	in	r24, 0x16	; 22
 2d8:	68 23       	and	r22, r24
	break;
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
 2dc:	83 b3       	in	r24, 0x13	; 19
 2de:	68 23       	and	r22, r24
	break;
 2e0:	04 c0       	rjmp	.+8      	; 0x2ea <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
 2e2:	80 b3       	in	r24, 0x10	; 16
 2e4:	68 23       	and	r22, r24
	break;
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
 2e8:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	66 23       	and	r22, r22
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <gpioPinRead+0x34>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
 2f2:	08 95       	ret

000002f4 <sevenSegInit>:
#include "sevenSeg.h"
#include "sevenSegConfig.h"
void sevenSegInit(En_SevenSegId_t a_segment_id)
{
switch(a_segment_id)
 2f4:	88 23       	and	r24, r24
 2f6:	19 f0       	breq	.+6      	; 0x2fe <sevenSegInit+0xa>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	51 f4       	brne	.+20     	; 0x310 <sevenSegInit+0x1c>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <sevenSegInit+0x14>
{
case SEG_0:
gpioPortDirection(GPIOB,HIGH);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	6f ef       	ldi	r22, 0xFF	; 255
 302:	0e 94 7f 00 	call	0xfe	; 0xfe <gpioPortDirection>
break;
 306:	08 95       	ret
case SEG_1:
gpioPortDirection(GPIOB,HIGH);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	6f ef       	ldi	r22, 0xFF	; 255
 30c:	0e 94 7f 00 	call	0xfe	; 0xfe <gpioPortDirection>
 310:	08 95       	ret

00000312 <sevenSegEnable>:
}
}

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
	switch(en_segment_id)
 312:	88 23       	and	r24, r24
 314:	19 f0       	breq	.+6      	; 0x31c <sevenSegEnable+0xa>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	61 f4       	brne	.+24     	; 0x332 <sevenSegEnable+0x20>
 31a:	06 c0       	rjmp	.+12     	; 0x328 <sevenSegEnable+0x16>
	{
case SEG_0:
gpioPinWrite(GPIOD,BIT0,HIGH);
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	4f ef       	ldi	r20, 0xFF	; 255
 322:	0e 94 0b 01 	call	0x216	; 0x216 <gpioPinWrite>
break;
 326:	08 95       	ret
case SEG_1:
gpioPinWrite(GPIOD,BIT1,HIGH);
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	62 e0       	ldi	r22, 0x02	; 2
 32c:	4f ef       	ldi	r20, 0xFF	; 255
 32e:	0e 94 0b 01 	call	0x216	; 0x216 <gpioPinWrite>
 332:	08 95       	ret

00000334 <sevenSegDisable>:
break;
}
}
void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
switch(en_segment_id)
 334:	88 23       	and	r24, r24
 336:	19 f0       	breq	.+6      	; 0x33e <sevenSegDisable+0xa>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	61 f4       	brne	.+24     	; 0x354 <sevenSegDisable+0x20>
 33c:	06 c0       	rjmp	.+12     	; 0x34a <sevenSegDisable+0x16>
{
case SEG_0:
gpioPinWrite(GPIOD,BIT0,LOW);
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	0e 94 0b 01 	call	0x216	; 0x216 <gpioPinWrite>
break;
 348:	08 95       	ret
case SEG_1:
gpioPinWrite(GPIOD,BIT1,LOW);
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	0e 94 0b 01 	call	0x216	; 0x216 <gpioPinWrite>
 354:	08 95       	ret

00000356 <sevenSegWrite>:
break;
}
}
void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
switch(en_segment_id)
 356:	88 23       	and	r24, r24
 358:	19 f0       	breq	.+6      	; 0x360 <sevenSegWrite+0xa>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	41 f4       	brne	.+16     	; 0x36e <sevenSegWrite+0x18>
 35e:	04 c0       	rjmp	.+8      	; 0x368 <sevenSegWrite+0x12>
{
case SEG_0:
gpioPortWrite(GPIOB,u8_number);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 90 00 	call	0x120	; 0x120 <gpioPortWrite>
break;
 366:	08 95       	ret
case SEG_1:
gpioPortWrite(GPIOB,u8_number);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 90 00 	call	0x120	; 0x120 <gpioPortWrite>
 36e:	08 95       	ret

00000370 <softwareDelayMs>:
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 370:	ab 01       	movw	r20, r22
 372:	bc 01       	movw	r22, r24
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 374:	41 15       	cp	r20, r1
 376:	51 05       	cpc	r21, r1
 378:	61 05       	cpc	r22, r1
 37a:	71 05       	cpc	r23, r1
 37c:	61 f4       	brne	.+24     	; 0x396 <softwareDelayMs+0x26>
 37e:	08 95       	ret
 380:	01 96       	adiw	r24, 0x01	; 1
{
	for(Local_Nope_counter = 0 ;Local_Nope_counter<1500;Local_Nope_counter++);
 382:	e5 e0       	ldi	r30, 0x05	; 5
 384:	8c 3d       	cpi	r24, 0xDC	; 220
 386:	9e 07       	cpc	r25, r30
 388:	d9 f7       	brne	.-10     	; 0x380 <softwareDelayMs+0x10>

u32_delay_in_ms--;	
 38a:	41 50       	subi	r20, 0x01	; 1
 38c:	50 40       	sbci	r21, 0x00	; 0
 38e:	60 40       	sbci	r22, 0x00	; 0
 390:	70 40       	sbci	r23, 0x00	; 0
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 392:	19 f4       	brne	.+6      	; 0x39a <softwareDelayMs+0x2a>
 394:	08 95       	ret
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	c9 01       	movw	r24, r18
 39c:	f1 cf       	rjmp	.-30     	; 0x380 <softwareDelayMs+0x10>

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
