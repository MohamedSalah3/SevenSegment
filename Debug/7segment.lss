
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006ac  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000740  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00000e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a3  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004b9  00000000  00000000  0000207b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000587  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f3  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f1  00000000  00000000  000035eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{
	uint8_t flag=0,counter=0,counter10=0,Loop_counter=0;
	uint8_t *ptru8_counter=&counter;
	uint8_t *ptru8_counter10=&counter10;
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8 ,0,0,T0_INTERRUPT_NORMAL);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	42 e0       	ldi	r20, 0x02	; 2
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	00 e0       	ldi	r16, 0x00	; 0
  9c:	ee 24       	eor	r14, r14
  9e:	e3 94       	inc	r14
  a0:	0e 94 a5 02 	call	0x54a	; 0x54a <timer0Init>
sevenSegInit(SEG_0);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 3f 02 	call	0x47e	; 0x47e <sevenSegInit>
sevenSegInit(SEG_1);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 3f 02 	call	0x47e	; 0x47e <sevenSegInit>

uint8_t Prescaler_Value=0;

int main(void)
{
	uint8_t flag=0,counter=0,counter10=0,Loop_counter=0;
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	10 e0       	ldi	r17, 0x00	; 0
}else{
	counter++;
}
	if(flag == 1)
	{
	  	counter10++;
  b4:	0a e0       	ldi	r16, 0x0A	; 10
sevenSegInit(SEG_0);
sevenSegInit(SEG_1);
//gpioPortDirection(GPIOD,HIGH);
    while(1)
    {
	sevenSegEnable(SEG_0);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 4e 02 	call	0x49c	; 0x49c <sevenSegEnable>
	sevenSegEnable(SEG_1);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 4e 02 	call	0x49c	; 0x49c <sevenSegEnable>
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
{
	flag=0;
/*softwareDelayMs(50);*/

if (counter >= 9 || counter10 >=9)
  c2:	19 30       	cpi	r17, 0x09	; 9
  c4:	20 f4       	brcc	.+8      	; 0xce <main+0x3c>
  c6:	d9 30       	cpi	r29, 0x09	; 9
  c8:	10 f4       	brcc	.+4      	; 0xce <main+0x3c>
{
	flag=1;
	counter=0;
	//break;
}else{
	counter++;
  ca:	1f 5f       	subi	r17, 0xFF	; 255
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x40>
}
	if(flag == 1)
	{
	  	counter10++;
  ce:	df 5f       	subi	r29, 0xFF	; 255
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	c0 2f       	mov	r28, r16
	}
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
{
sevenSegDisable(SEG_0);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 5f 02 	call	0x4be	; 0x4be <sevenSegDisable>
sevenSegEnable(SEG_1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 4e 02 	call	0x49c	; 0x49c <sevenSegEnable>
sevenSegWrite(SEG_1,*ptru8_counter);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	61 2f       	mov	r22, r17
  e4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sevenSegWrite>
timer0Start();
  e8:	0e 94 98 02 	call	0x530	; 0x530 <timer0Start>
timer0DelayMs(10);
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 cf 02 	call	0x59e	; 0x59e <timer0DelayMs>
sevenSegDisable(SEG_1);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 5f 02 	call	0x4be	; 0x4be <sevenSegDisable>
sevenSegEnable(SEG_0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 4e 02 	call	0x49c	; 0x49c <sevenSegEnable>
sevenSegWrite(SEG_0,*ptru8_counter10);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	6d 2f       	mov	r22, r29
 104:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sevenSegWrite>
/*softwareDelayMs(50);*/
timer0Start();
 108:	0e 94 98 02 	call	0x530	; 0x530 <timer0Start>
timer0DelayMs(10);
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 cf 02 	call	0x59e	; 0x59e <timer0DelayMs>
sevenSegDisable(SEG_0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 5f 02 	call	0x4be	; 0x4be <sevenSegDisable>
 11a:	c1 50       	subi	r28, 0x01	; 1
}
	if(flag == 1)
	{
	  	counter10++;
	}
for (Loop_counter=0;Loop_counter<10;Loop_counter++)
 11c:	d9 f6       	brne	.-74     	; 0xd4 <main+0x42>
timer0DelayMs(10);
sevenSegDisable(SEG_0);
}
}

timer0Start();
 11e:	0e 94 98 02 	call	0x530	; 0x530 <timer0Start>
timer0DelayMs(500);//TODO:: Please write your application code
 122:	84 ef       	ldi	r24, 0xF4	; 244
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 cf 02 	call	0x59e	; 0x59e <timer0DelayMs>

   }
 12a:	c5 cf       	rjmp	.-118    	; 0xb6 <main+0x24>

0000012c <__vector_11>:
}
void __vector_11(void) __attribute__((signal,__INTR_ATTRS));
void __vector_11(void)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
u32_ovf_counter++;
 13e:	80 91 61 00 	lds	r24, 0x0061
 142:	90 91 62 00 	lds	r25, 0x0062
 146:	a0 91 63 00 	lds	r26, 0x0063
 14a:	b0 91 64 00 	lds	r27, 0x0064
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	a1 1d       	adc	r26, r1
 152:	b1 1d       	adc	r27, r1
 154:	80 93 61 00 	sts	0x0061, r24
 158:	90 93 62 00 	sts	0x0062, r25
 15c:	a0 93 63 00 	sts	0x0063, r26
 160:	b0 93 64 00 	sts	0x0064, r27
}
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	49 f0       	breq	.+18     	; 0x18c <gpioPortDirection+0x16>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	28 f0       	brcs	.+10     	; 0x188 <gpioPortDirection+0x12>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	39 f0       	breq	.+14     	; 0x190 <gpioPortDirection+0x1a>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	41 f4       	brne	.+16     	; 0x196 <gpioPortDirection+0x20>
 186:	06 c0       	rjmp	.+12     	; 0x194 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
 188:	6a bb       	out	0x1a, r22	; 26
	break;
 18a:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
 18c:	67 bb       	out	0x17, r22	; 23
	break;
 18e:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
 190:	64 bb       	out	0x14, r22	; 20
	break;
 192:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	49 f0       	breq	.+18     	; 0x1ae <gpioPortWrite+0x16>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	28 f0       	brcs	.+10     	; 0x1aa <gpioPortWrite+0x12>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <gpioPortWrite+0x1a>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	41 f4       	brne	.+16     	; 0x1b8 <gpioPortWrite+0x20>
 1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
 1aa:	6b bb       	out	0x1b, r22	; 27
	break;
 1ac:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
 1ae:	68 bb       	out	0x18, r22	; 24
	break;
 1b0:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
 1b2:	65 bb       	out	0x15, r22	; 21
	break;
 1b4:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
 1b6:	62 bb       	out	0x12, r22	; 18
 1b8:	08 95       	ret

000001ba <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	59 f0       	breq	.+22     	; 0x1d4 <gpioPortToggle+0x1a>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <gpioPortToggle+0x12>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	59 f0       	breq	.+22     	; 0x1dc <gpioPortToggle+0x22>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	81 f4       	brne	.+32     	; 0x1ea <gpioPortToggle+0x30>
 1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
 1cc:	8b b3       	in	r24, 0x1b	; 27
 1ce:	80 95       	com	r24
 1d0:	8b bb       	out	0x1b, r24	; 27
	break;
 1d2:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
 1d4:	88 b3       	in	r24, 0x18	; 24
 1d6:	80 95       	com	r24
 1d8:	88 bb       	out	0x18, r24	; 24
	break;
 1da:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
 1dc:	85 b3       	in	r24, 0x15	; 21
 1de:	80 95       	com	r24
 1e0:	85 bb       	out	0x15, r24	; 21
	break;
 1e2:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
 1e4:	82 b3       	in	r24, 0x12	; 18
 1e6:	80 95       	com	r24
 1e8:	82 bb       	out	0x12, r24	; 18
 1ea:	08 95       	ret

000001ec <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	49 f0       	breq	.+18     	; 0x202 <gpioPortRead+0x16>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <gpioPortRead+0x12>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	39 f0       	breq	.+14     	; 0x206 <gpioPortRead+0x1a>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	49 f4       	brne	.+18     	; 0x20e <gpioPortRead+0x22>
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
 1fe:	8b b3       	in	r24, 0x1b	; 27
	break;
 200:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
 202:	88 b3       	in	r24, 0x18	; 24
	break;
 204:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
 206:	85 b3       	in	r24, 0x15	; 21
	break;
 208:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
 20a:	82 b3       	in	r24, 0x12	; 18
	break;
 20c:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
 20e:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
 210:	08 95       	ret

00000212 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
 212:	44 23       	and	r20, r20
 214:	19 f0       	breq	.+6      	; 0x21c <gpioPinDirection+0xa>
 216:	4f 3f       	cpi	r20, 0xFF	; 255
 218:	d1 f5       	brne	.+116    	; 0x28e <gpioPinDirection+0x7c>
 21a:	21 c0       	rjmp	.+66     	; 0x25e <gpioPinDirection+0x4c>
case LOW:
{
switch (u8_port)	
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	69 f0       	breq	.+26     	; 0x23a <gpioPinDirection+0x28>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	28 f0       	brcs	.+10     	; 0x22e <gpioPinDirection+0x1c>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	79 f0       	breq	.+30     	; 0x246 <gpioPinDirection+0x34>
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	c9 f4       	brne	.+50     	; 0x25e <gpioPinDirection+0x4c>
 22c:	12 c0       	rjmp	.+36     	; 0x252 <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
 22e:	8a b3       	in	r24, 0x1a	; 26
 230:	96 2f       	mov	r25, r22
 232:	90 95       	com	r25
 234:	89 23       	and	r24, r25
 236:	8a bb       	out	0x1a, r24	; 26
 238:	1b c0       	rjmp	.+54     	; 0x270 <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
 23a:	87 b3       	in	r24, 0x17	; 23
 23c:	96 2f       	mov	r25, r22
 23e:	90 95       	com	r25
 240:	89 23       	and	r24, r25
 242:	87 bb       	out	0x17, r24	; 23
 244:	19 c0       	rjmp	.+50     	; 0x278 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
 246:	84 b3       	in	r24, 0x14	; 20
 248:	96 2f       	mov	r25, r22
 24a:	90 95       	com	r25
 24c:	89 23       	and	r24, r25
 24e:	84 bb       	out	0x14, r24	; 20
 250:	17 c0       	rjmp	.+46     	; 0x280 <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
 252:	81 b3       	in	r24, 0x11	; 17
 254:	96 2f       	mov	r25, r22
 256:	90 95       	com	r25
 258:	89 23       	and	r24, r25
 25a:	81 bb       	out	0x11, r24	; 17
 25c:	15 c0       	rjmp	.+42     	; 0x288 <gpioPinDirection+0x76>
	break;
	
}
}
case HIGH:{
switch (u8_port)	
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	59 f0       	breq	.+22     	; 0x278 <gpioPinDirection+0x66>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	28 f0       	brcs	.+10     	; 0x270 <gpioPinDirection+0x5e>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	59 f0       	breq	.+22     	; 0x280 <gpioPinDirection+0x6e>
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	81 f4       	brne	.+32     	; 0x28e <gpioPinDirection+0x7c>
 26e:	0c c0       	rjmp	.+24     	; 0x288 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
 270:	8a b3       	in	r24, 0x1a	; 26
 272:	68 2b       	or	r22, r24
 274:	6a bb       	out	0x1a, r22	; 26
	break;
 276:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
 278:	87 b3       	in	r24, 0x17	; 23
 27a:	68 2b       	or	r22, r24
 27c:	67 bb       	out	0x17, r22	; 23
	break;
 27e:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
 280:	84 b3       	in	r24, 0x14	; 20
 282:	68 2b       	or	r22, r24
 284:	64 bb       	out	0x14, r22	; 20
	break;
 286:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
 288:	81 b3       	in	r24, 0x11	; 17
 28a:	68 2b       	or	r22, r24
 28c:	61 bb       	out	0x11, r22	; 17
 28e:	08 95       	ret

00000290 <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
 290:	44 23       	and	r20, r20
 292:	19 f0       	breq	.+6      	; 0x29a <gpioPinWrite+0xa>
 294:	4f 3f       	cpi	r20, 0xFF	; 255
 296:	b1 f5       	brne	.+108    	; 0x304 <gpioPinWrite+0x74>
 298:	1d c0       	rjmp	.+58     	; 0x2d4 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	61 f0       	breq	.+24     	; 0x2b6 <gpioPinWrite+0x26>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	28 f0       	brcs	.+10     	; 0x2ac <gpioPinWrite+0x1c>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	69 f0       	breq	.+26     	; 0x2c0 <gpioPinWrite+0x30>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f5       	brne	.+90     	; 0x304 <gpioPinWrite+0x74>
 2aa:	0f c0       	rjmp	.+30     	; 0x2ca <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
 2ac:	8b b3       	in	r24, 0x1b	; 27
 2ae:	60 95       	com	r22
 2b0:	68 23       	and	r22, r24
 2b2:	6b bb       	out	0x1b, r22	; 27
	break;
 2b4:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
 2b6:	88 b3       	in	r24, 0x18	; 24
 2b8:	60 95       	com	r22
 2ba:	68 23       	and	r22, r24
 2bc:	68 bb       	out	0x18, r22	; 24
	break;
 2be:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
 2c0:	85 b3       	in	r24, 0x15	; 21
 2c2:	60 95       	com	r22
 2c4:	68 23       	and	r22, r24
 2c6:	65 bb       	out	0x15, r22	; 21
	break;
 2c8:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
 2ca:	82 b3       	in	r24, 0x12	; 18
 2cc:	60 95       	com	r22
 2ce:	68 23       	and	r22, r24
 2d0:	62 bb       	out	0x12, r22	; 18
	break;
 2d2:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	59 f0       	breq	.+22     	; 0x2ee <gpioPinWrite+0x5e>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	28 f0       	brcs	.+10     	; 0x2e6 <gpioPinWrite+0x56>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	59 f0       	breq	.+22     	; 0x2f6 <gpioPinWrite+0x66>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	81 f4       	brne	.+32     	; 0x304 <gpioPinWrite+0x74>
 2e4:	0c c0       	rjmp	.+24     	; 0x2fe <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
 2e6:	8b b3       	in	r24, 0x1b	; 27
 2e8:	68 2b       	or	r22, r24
 2ea:	6b bb       	out	0x1b, r22	; 27
	break;
 2ec:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	68 2b       	or	r22, r24
 2f2:	68 bb       	out	0x18, r22	; 24
	break;
 2f4:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
 2f6:	85 b3       	in	r24, 0x15	; 21
 2f8:	68 2b       	or	r22, r24
 2fa:	65 bb       	out	0x15, r22	; 21
	break;
 2fc:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
 2fe:	82 b3       	in	r24, 0x12	; 18
 300:	68 2b       	or	r22, r24
 302:	62 bb       	out	0x12, r22	; 18
 304:	08 95       	ret

00000306 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	59 f0       	breq	.+22     	; 0x320 <gpioPinToggle+0x1a>
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	28 f0       	brcs	.+10     	; 0x318 <gpioPinToggle+0x12>
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	59 f0       	breq	.+22     	; 0x328 <gpioPinToggle+0x22>
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	81 f4       	brne	.+32     	; 0x336 <gpioPinToggle+0x30>
 316:	0c c0       	rjmp	.+24     	; 0x330 <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
 318:	8b b3       	in	r24, 0x1b	; 27
 31a:	68 27       	eor	r22, r24
 31c:	6b bb       	out	0x1b, r22	; 27
	break;
 31e:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
 320:	88 b3       	in	r24, 0x18	; 24
 322:	68 27       	eor	r22, r24
 324:	68 bb       	out	0x18, r22	; 24
	break;
 326:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
 328:	85 b3       	in	r24, 0x15	; 21
 32a:	68 27       	eor	r22, r24
 32c:	65 bb       	out	0x15, r22	; 21
	break;
 32e:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
 330:	82 b3       	in	r24, 0x12	; 18
 332:	68 27       	eor	r22, r24
 334:	62 bb       	out	0x12, r22	; 18
 336:	08 95       	ret

00000338 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	51 f0       	breq	.+20     	; 0x350 <gpioPinRead+0x18>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	28 f0       	brcs	.+10     	; 0x34a <gpioPinRead+0x12>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	49 f0       	breq	.+18     	; 0x356 <gpioPinRead+0x1e>
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	69 f4       	brne	.+26     	; 0x362 <gpioPinRead+0x2a>
 348:	09 c0       	rjmp	.+18     	; 0x35c <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
 34a:	89 b3       	in	r24, 0x19	; 25
 34c:	68 23       	and	r22, r24
	break;
 34e:	0a c0       	rjmp	.+20     	; 0x364 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
 350:	86 b3       	in	r24, 0x16	; 22
 352:	68 23       	and	r22, r24
	break;
 354:	07 c0       	rjmp	.+14     	; 0x364 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
 356:	83 b3       	in	r24, 0x13	; 19
 358:	68 23       	and	r22, r24
	break;
 35a:	04 c0       	rjmp	.+8      	; 0x364 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
 35c:	80 b3       	in	r24, 0x10	; 16
 35e:	68 23       	and	r22, r24
	break;
 360:	01 c0       	rjmp	.+2      	; 0x364 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
 362:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	66 23       	and	r22, r22
 368:	09 f4       	brne	.+2      	; 0x36c <gpioPinRead+0x34>
 36a:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
 36c:	08 95       	ret

0000036e <G_interrupt_Enable>:

#include "Interrupts.h"

void G_interrupt_Enable(void)
{
SET_BIT(SREG,7);
 36e:	8f b7       	in	r24, 0x3f	; 63
 370:	80 68       	ori	r24, 0x80	; 128
 372:	8f bf       	out	0x3f, r24	; 63
//SREG |=(1<<7);
}
 374:	08 95       	ret

00000376 <G_interrupt_Disable>:

void G_interrupt_Disable(void)
{

CLEAR_BIT(SREG,7);
 376:	8f b7       	in	r24, 0x3f	; 63
 378:	8f 77       	andi	r24, 0x7F	; 127
 37a:	8f bf       	out	0x3f, r24	; 63
}
 37c:	08 95       	ret

0000037e <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	69 f0       	breq	.+26     	; 0x39c <Led_Init+0x1e>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	28 f0       	brcs	.+10     	; 0x390 <Led_Init+0x12>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	79 f0       	breq	.+30     	; 0x3a8 <Led_Init+0x2a>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	c1 f4       	brne	.+48     	; 0x3be <Led_Init+0x40>
 38e:	12 c0       	rjmp	.+36     	; 0x3b4 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	60 e1       	ldi	r22, 0x10	; 16
 394:	4f ef       	ldi	r20, 0xFF	; 255
 396:	0e 94 09 01 	call	0x212	; 0x212 <gpioPinDirection>
break;
 39a:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	60 e2       	ldi	r22, 0x20	; 32
 3a0:	4f ef       	ldi	r20, 0xFF	; 255
 3a2:	0e 94 09 01 	call	0x212	; 0x212 <gpioPinDirection>
break;
 3a6:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	60 e4       	ldi	r22, 0x40	; 64
 3ac:	4f ef       	ldi	r20, 0xFF	; 255
 3ae:	0e 94 09 01 	call	0x212	; 0x212 <gpioPinDirection>
break;
 3b2:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	60 e8       	ldi	r22, 0x80	; 128
 3b8:	4f ef       	ldi	r20, 0xFF	; 255
 3ba:	0e 94 09 01 	call	0x212	; 0x212 <gpioPinDirection>
 3be:	08 95       	ret

000003c0 <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	69 f0       	breq	.+26     	; 0x3de <Led_On+0x1e>
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	28 f0       	brcs	.+10     	; 0x3d2 <Led_On+0x12>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	79 f0       	breq	.+30     	; 0x3ea <Led_On+0x2a>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	c1 f4       	brne	.+48     	; 0x400 <Led_On+0x40>
 3d0:	12 c0       	rjmp	.+36     	; 0x3f6 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	60 e1       	ldi	r22, 0x10	; 16
 3d6:	4f ef       	ldi	r20, 0xFF	; 255
 3d8:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
break;
 3dc:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	60 e2       	ldi	r22, 0x20	; 32
 3e2:	4f ef       	ldi	r20, 0xFF	; 255
 3e4:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
break;
 3e8:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	60 e4       	ldi	r22, 0x40	; 64
 3ee:	4f ef       	ldi	r20, 0xFF	; 255
 3f0:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
break;
 3f4:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	60 e8       	ldi	r22, 0x80	; 128
 3fa:	4f ef       	ldi	r20, 0xFF	; 255
 3fc:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
 400:	08 95       	ret

00000402 <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	69 f0       	breq	.+26     	; 0x420 <Led_Off+0x1e>
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	28 f0       	brcs	.+10     	; 0x414 <Led_Off+0x12>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	79 f0       	breq	.+30     	; 0x42c <Led_Off+0x2a>
 40e:	83 30       	cpi	r24, 0x03	; 3
 410:	c1 f4       	brne	.+48     	; 0x442 <Led_Off+0x40>
 412:	12 c0       	rjmp	.+36     	; 0x438 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	60 e1       	ldi	r22, 0x10	; 16
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
break;
 41e:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	60 e2       	ldi	r22, 0x20	; 32
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
break;
 42a:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	60 e4       	ldi	r22, 0x40	; 64
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
break;
 436:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	60 e8       	ldi	r22, 0x80	; 128
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
 442:	08 95       	ret

00000444 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	61 f0       	breq	.+24     	; 0x460 <Led_Toggle+0x1c>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	28 f0       	brcs	.+10     	; 0x456 <Led_Toggle+0x12>
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	69 f0       	breq	.+26     	; 0x46a <Led_Toggle+0x26>
 450:	83 30       	cpi	r24, 0x03	; 3
 452:	a1 f4       	brne	.+40     	; 0x47c <Led_Toggle+0x38>
 454:	0f c0       	rjmp	.+30     	; 0x474 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	60 e1       	ldi	r22, 0x10	; 16
 45a:	0e 94 83 01 	call	0x306	; 0x306 <gpioPinToggle>
break;
 45e:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	60 e2       	ldi	r22, 0x20	; 32
 464:	0e 94 83 01 	call	0x306	; 0x306 <gpioPinToggle>
break;
 468:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	60 e4       	ldi	r22, 0x40	; 64
 46e:	0e 94 83 01 	call	0x306	; 0x306 <gpioPinToggle>
break;
 472:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	60 e8       	ldi	r22, 0x80	; 128
 478:	0e 94 83 01 	call	0x306	; 0x306 <gpioPinToggle>
 47c:	08 95       	ret

0000047e <sevenSegInit>:
#include "sevenSeg.h"
#include "sevenSegConfig.h"
void sevenSegInit(En_SevenSegId_t a_segment_id)
{
switch(a_segment_id)
 47e:	88 23       	and	r24, r24
 480:	19 f0       	breq	.+6      	; 0x488 <sevenSegInit+0xa>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	51 f4       	brne	.+20     	; 0x49a <sevenSegInit+0x1c>
 486:	05 c0       	rjmp	.+10     	; 0x492 <sevenSegInit+0x14>
{
case SEG_0:
gpioPortDirection(GPIOB,HIGH);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	6f ef       	ldi	r22, 0xFF	; 255
 48c:	0e 94 bb 00 	call	0x176	; 0x176 <gpioPortDirection>
break;
 490:	08 95       	ret
case SEG_1:
gpioPortDirection(GPIOB,HIGH);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	6f ef       	ldi	r22, 0xFF	; 255
 496:	0e 94 bb 00 	call	0x176	; 0x176 <gpioPortDirection>
 49a:	08 95       	ret

0000049c <sevenSegEnable>:
}
}

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
	switch(en_segment_id)
 49c:	88 23       	and	r24, r24
 49e:	19 f0       	breq	.+6      	; 0x4a6 <sevenSegEnable+0xa>
 4a0:	81 30       	cpi	r24, 0x01	; 1
 4a2:	61 f4       	brne	.+24     	; 0x4bc <sevenSegEnable+0x20>
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <sevenSegEnable+0x16>
	{
case SEG_0:
gpioPinWrite(GPIOD,BIT0,HIGH);
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	4f ef       	ldi	r20, 0xFF	; 255
 4ac:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
break;
 4b0:	08 95       	ret
case SEG_1:
gpioPinWrite(GPIOD,BIT1,HIGH);
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	4f ef       	ldi	r20, 0xFF	; 255
 4b8:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
 4bc:	08 95       	ret

000004be <sevenSegDisable>:
break;
}
}
void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
switch(en_segment_id)
 4be:	88 23       	and	r24, r24
 4c0:	19 f0       	breq	.+6      	; 0x4c8 <sevenSegDisable+0xa>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	61 f4       	brne	.+24     	; 0x4de <sevenSegDisable+0x20>
 4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <sevenSegDisable+0x16>
{
case SEG_0:
gpioPinWrite(GPIOD,BIT0,LOW);
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
break;
 4d2:	08 95       	ret
case SEG_1:
gpioPinWrite(GPIOD,BIT1,LOW);
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	0e 94 48 01 	call	0x290	; 0x290 <gpioPinWrite>
 4de:	08 95       	ret

000004e0 <sevenSegWrite>:
break;
}
}
void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
switch(en_segment_id)
 4e0:	88 23       	and	r24, r24
 4e2:	19 f0       	breq	.+6      	; 0x4ea <sevenSegWrite+0xa>
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	41 f4       	brne	.+16     	; 0x4f8 <sevenSegWrite+0x18>
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <sevenSegWrite+0x12>
{
case SEG_0:
gpioPortWrite(GPIOB,u8_number);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 cc 00 	call	0x198	; 0x198 <gpioPortWrite>
break;
 4f0:	08 95       	ret
case SEG_1:
gpioPortWrite(GPIOB,u8_number);
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 cc 00 	call	0x198	; 0x198 <gpioPortWrite>
 4f8:	08 95       	ret

000004fa <softwareDelayMs>:
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 4fa:	ab 01       	movw	r20, r22
 4fc:	bc 01       	movw	r22, r24
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 4fe:	41 15       	cp	r20, r1
 500:	51 05       	cpc	r21, r1
 502:	61 05       	cpc	r22, r1
 504:	71 05       	cpc	r23, r1
 506:	61 f4       	brne	.+24     	; 0x520 <softwareDelayMs+0x26>
 508:	08 95       	ret
 50a:	01 96       	adiw	r24, 0x01	; 1
{
	for(Local_Nope_counter = 0 ;Local_Nope_counter<1500;Local_Nope_counter++);
 50c:	e5 e0       	ldi	r30, 0x05	; 5
 50e:	8c 3d       	cpi	r24, 0xDC	; 220
 510:	9e 07       	cpc	r25, r30
 512:	d9 f7       	brne	.-10     	; 0x50a <softwareDelayMs+0x10>

u32_delay_in_ms--;	
 514:	41 50       	subi	r20, 0x01	; 1
 516:	50 40       	sbci	r21, 0x00	; 0
 518:	60 40       	sbci	r22, 0x00	; 0
 51a:	70 40       	sbci	r23, 0x00	; 0
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
 51c:	19 f4       	brne	.+6      	; 0x524 <softwareDelayMs+0x2a>
 51e:	08 95       	ret
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	c9 01       	movw	r24, r18
 526:	f1 cf       	rjmp	.-30     	; 0x50a <softwareDelayMs+0x10>

00000528 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;	 
 528:	82 bf       	out	0x32, r24	; 50
}
 52a:	08 95       	ret

0000052c <timer0Read>:
 
uint8_t timer0Read(void)
{
	 return TCNT0;	 
 52c:	82 b7       	in	r24, 0x32	; 50
}
 52e:	08 95       	ret

00000530 <timer0Start>:
						
*/
void timer0Start(void)
{

	 TCCR0 &= (0xF8);		 
 530:	83 b7       	in	r24, 0x33	; 51
 532:	88 7f       	andi	r24, 0xF8	; 248
 534:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
 536:	93 b7       	in	r25, 0x33	; 51
 538:	80 91 60 00 	lds	r24, 0x0060
 53c:	89 2b       	or	r24, r25
 53e:	83 bf       	out	0x33, r24	; 51
}
 540:	08 95       	ret

00000542 <timer0Stop>:
						      0     0    0
*/ 
void timer0Stop(void)
 {
	 
TCCR0 &= (0xF8);		 
 542:	83 b7       	in	r24, 0x33	; 51
 544:	88 7f       	andi	r24, 0xF8	; 248
 546:	83 bf       	out	0x33, r24	; 51
	 
 }
 548:	08 95       	ret

0000054a <timer0Init>:
#include "ledConfig.h"
#include "timers.h"
#include "registers.h"
#include "Interrupts.h"
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
 54a:	ef 92       	push	r14
 54c:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
 54e:	44 23       	and	r20, r20
 550:	19 f4       	brne	.+6      	; 0x558 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
 552:	0e 94 a1 02 	call	0x542	; 0x542 <timer0Stop>
 556:	20 c0       	rjmp	.+64     	; 0x598 <timer0Init+0x4e>
}
else
{
TCCR0 |= en_mode | en_OC0|en_prescal ;
 558:	93 b7       	in	r25, 0x33	; 51
 55a:	89 2b       	or	r24, r25
 55c:	68 2b       	or	r22, r24
 55e:	64 2b       	or	r22, r20
 560:	63 bf       	out	0x33, r22	; 51
Prescaler_Value=en_prescal;
 562:	40 93 60 00 	sts	0x0060, r20
TCNT0 = u8_initialValue;
 566:	22 bf       	out	0x32, r18	; 50
OCR0  =u8_outputCompare;
 568:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	e8 16       	cp	r14, r24
 56e:	49 f0       	breq	.+18     	; 0x582 <timer0Init+0x38>
 570:	e8 16       	cp	r14, r24
 572:	20 f0       	brcs	.+8      	; 0x57c <timer0Init+0x32>
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	e8 16       	cp	r14, r24
 578:	79 f4       	brne	.+30     	; 0x598 <timer0Init+0x4e>
 57a:	09 c0       	rjmp	.+18     	; 0x58e <timer0Init+0x44>
case  T0_POLLING:
TIMSK &= T0_POLLING;
 57c:	89 b7       	in	r24, 0x39	; 57
 57e:	19 be       	out	0x39, r1	; 57
break;
 580:	0b c0       	rjmp	.+22     	; 0x598 <timer0Init+0x4e>
case T0_INTERRUPT_NORMAL :
{
G_interrupt_Enable();
 582:	0e 94 b7 01 	call	0x36e	; 0x36e <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
 586:	89 b7       	in	r24, 0x39	; 57
 588:	81 60       	ori	r24, 0x01	; 1
 58a:	89 bf       	out	0x39, r24	; 57
break;
 58c:	05 c0       	rjmp	.+10     	; 0x598 <timer0Init+0x4e>
}
case T0_INTERRUPT_CMP:
{
G_interrupt_Enable();
 58e:	0e 94 b7 01 	call	0x36e	; 0x36e <G_interrupt_Enable>
TIMSK |=T0_INTERRUPT_CMP;
 592:	89 b7       	in	r24, 0x39	; 57
 594:	82 60       	ori	r24, 0x02	; 2
 596:	89 bf       	out	0x39, r24	; 57
}
}
	 
}

}
 598:	0f 91       	pop	r16
 59a:	ef 90       	pop	r14
 59c:	08 95       	ret

0000059e <timer0DelayMs>:
 
 
 
 */
 void timer0DelayMs(uint16_t u16_delay_in_ms)
 {
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	ec 01       	movw	r28, r24
	uint32_t u32_loop=0;
	u32_ovf_counter=0;
 5a4:	10 92 61 00 	sts	0x0061, r1
 5a8:	10 92 62 00 	sts	0x0062, r1
 5ac:	10 92 63 00 	sts	0x0063, r1
 5b0:	10 92 64 00 	sts	0x0064, r1
		timer0Set(48);
 5b4:	80 e3       	ldi	r24, 0x30	; 48
 5b6:	0e 94 94 02 	call	0x528	; 0x528 <timer0Set>
		while(u32_ovf_counter <= (8)*u16_delay_in_ms);
 5ba:	cc 0f       	add	r28, r28
 5bc:	dd 1f       	adc	r29, r29
 5be:	cc 0f       	add	r28, r28
 5c0:	dd 1f       	adc	r29, r29
 5c2:	cc 0f       	add	r28, r28
 5c4:	dd 1f       	adc	r29, r29
 5c6:	ae 01       	movw	r20, r28
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	80 91 61 00 	lds	r24, 0x0061
 5d0:	90 91 62 00 	lds	r25, 0x0062
 5d4:	a0 91 63 00 	lds	r26, 0x0063
 5d8:	b0 91 64 00 	lds	r27, 0x0064
 5dc:	48 17       	cp	r20, r24
 5de:	59 07       	cpc	r21, r25
 5e0:	6a 07       	cpc	r22, r26
 5e2:	7b 07       	cpc	r23, r27
 5e4:	98 f7       	brcc	.-26     	; 0x5cc <timer0DelayMs+0x2e>
	
}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <timer0DelayUs>:
 
 
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
 5ec:	8f 92       	push	r8
 5ee:	9f 92       	push	r9
 5f0:	af 92       	push	r10
 5f2:	bf 92       	push	r11
 5f4:	cf 92       	push	r12
 5f6:	df 92       	push	r13
 5f8:	ef 92       	push	r14
 5fa:	ff 92       	push	r15
 5fc:	4b 01       	movw	r8, r22
 5fe:	5c 01       	movw	r10, r24
	u32_ovf_counter=0;
 600:	10 92 61 00 	sts	0x0061, r1
 604:	10 92 62 00 	sts	0x0062, r1
 608:	10 92 63 00 	sts	0x0063, r1
 60c:	10 92 64 00 	sts	0x0064, r1
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 610:	61 15       	cp	r22, r1
 612:	71 05       	cpc	r23, r1
 614:	81 05       	cpc	r24, r1
 616:	91 05       	cpc	r25, r1
 618:	e9 f0       	breq	.+58     	; 0x654 <timer0DelayUs+0x68>
 61a:	cc 24       	eor	r12, r12
 61c:	dd 24       	eor	r13, r13
 61e:	76 01       	movw	r14, r12
	{
	timer0Set(254);
 620:	8e ef       	ldi	r24, 0xFE	; 254
 622:	0e 94 94 02 	call	0x528	; 0x528 <timer0Set>
	while(u32_ovf_counter <= 1);	
 626:	80 91 61 00 	lds	r24, 0x0061
 62a:	90 91 62 00 	lds	r25, 0x0062
 62e:	a0 91 63 00 	lds	r26, 0x0063
 632:	b0 91 64 00 	lds	r27, 0x0064
 636:	82 30       	cpi	r24, 0x02	; 2
 638:	91 05       	cpc	r25, r1
 63a:	a1 05       	cpc	r26, r1
 63c:	b1 05       	cpc	r27, r1
 63e:	98 f3       	brcs	.-26     	; 0x626 <timer0DelayUs+0x3a>
 
 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
	u32_ovf_counter=0;
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
 640:	08 94       	sec
 642:	c1 1c       	adc	r12, r1
 644:	d1 1c       	adc	r13, r1
 646:	e1 1c       	adc	r14, r1
 648:	f1 1c       	adc	r15, r1
 64a:	c8 14       	cp	r12, r8
 64c:	d9 04       	cpc	r13, r9
 64e:	ea 04       	cpc	r14, r10
 650:	fb 04       	cpc	r15, r11
 652:	31 f7       	brne	.-52     	; 0x620 <timer0DelayUs+0x34>
	timer0Set(254);
	while(u32_ovf_counter <= 1);	
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	
}/*1*/
 654:	ff 90       	pop	r15
 656:	ef 90       	pop	r14
 658:	df 90       	pop	r13
 65a:	cf 90       	pop	r12
 65c:	bf 90       	pop	r11
 65e:	af 90       	pop	r10
 660:	9f 90       	pop	r9
 662:	8f 90       	pop	r8
 664:	08 95       	ret

00000666 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	 u32_ovf_counter=0;
 666:	10 92 61 00 	sts	0x0061, r1
 66a:	10 92 62 00 	sts	0x0062, r1
 66e:	10 92 63 00 	sts	0x0063, r1
 672:	10 92 64 00 	sts	0x0064, r1
	 timer0Set(155);
 676:	8b e9       	ldi	r24, 0x9B	; 155
 678:	0e 94 94 02 	call	0x528	; 0x528 <timer0Set>
	 while(u32_ovf_counter <= 1);
 67c:	80 91 61 00 	lds	r24, 0x0061
 680:	90 91 62 00 	lds	r25, 0x0062
 684:	a0 91 63 00 	lds	r26, 0x0063
 688:	b0 91 64 00 	lds	r27, 0x0064
 68c:	82 30       	cpi	r24, 0x02	; 2
 68e:	91 05       	cpc	r25, r1
 690:	a1 05       	cpc	r26, r1
 692:	b1 05       	cpc	r27, r1
 694:	98 f3       	brcs	.-26     	; 0x67c <timer0SwPWM+0x16>
	 
	 
} 
 696:	08 95       	ret

00000698 <timer1Init>:
 En_timer1Interrupt_t en_interruptMask)
 {
	 
	 
	 
 }
 698:	08 95       	ret

0000069a <timer1Set>:
 * @param value
 */
void timer1Set(uint16_t u16_value)
{
	
}
 69a:	08 95       	ret

0000069c <timer1Read>:
 */
uint16_t timer1Read(void)
{
	
	
}
 69c:	08 95       	ret

0000069e <timer1Start>:
void timer1Start(void)
{


	
}
 69e:	08 95       	ret

000006a0 <timer1Stop>:
void timer1Stop(void)
{
	
	
	
}
 6a0:	08 95       	ret

000006a2 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{
	
	
}
 6a2:	08 95       	ret

000006a4 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{
	
	
}
 6a4:	08 95       	ret

000006a6 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
	
	
}
 6a6:	08 95       	ret

000006a8 <_exit>:
 6a8:	f8 94       	cli

000006aa <__stop_program>:
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <__stop_program>
